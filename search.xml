<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git - Git规范整理</title>
      <link href="2023/10/07/Git/git%E8%A7%84%E8%8C%83/"/>
      <url>2023/10/07/Git/git%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本篇教程是自己学习 Git 记录的<br>本篇教程不会介绍 Git 背景以及一些专业知识，毕竟本人时间有限哈哈哈！<br>如果喜欢教程就评论下或者把站点添加到你宝贵的收藏夹里面吧</p></div><h1 id="Git-Commit-规范指南"><a href="#Git-Commit-规范指南" class="headerlink" title="Git Commit 规范指南"></a>Git Commit 规范指南</h1><p>本文旨在整理并介绍 Git 提交信息的规范和标准，以及各种提交描述的含义和用法。遵循一定的提交规范，能够保持项目的整洁和易读，也方便团队成员间的协作。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#git-commit-规范指南">Git Commit 规范指南</a><ul><li><a href="#目录">目录</a></li><li><a href="#提交类型type">提交类型(Type)</a></li><li><a href="#作用域scope">作用域(Scope)</a></li><li><a href="#描述description">描述(Description)</a></li><li><a href="#正文body">正文(Body)</a></li><li><a href="#脚注footer">脚注(Footer)</a></li><li><a href="#breaking-change">BREAKING CHANGE</a><ul><li><a href="#用法">用法</a></li><li><a href="#案例">案例</a></li></ul></li></ul></li></ul><h2 id="提交类型-Type"><a href="#提交类型-Type" class="headerlink" title="提交类型(Type)"></a>提交类型(Type)</h2><p>提交类型用于表明每个提交的主要目的。常见的提交类型包括：</p><ul><li><code>feat</code>: 新功能(feature)</li><li><code>fix</code>: 修补 bug</li><li><code>docs</code>: 文档(documentation)</li><li><code>style</code>: 代码格式(不影响代码运行的变动)</li><li><code>refactor</code>: 重构(即不是新增功能，也不是修改 bug 的代码变动)</li><li><code>perf</code>: 提高性能的代码</li><li><code>test</code>: 增加测试</li><li><code>chore</code>: 构建过程或辅助工具的变动</li></ul><h2 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h2><p>作用域用于指明本次提交影响的范围。例如数据层、控制层、视图层等，或者是具体的模块名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feat(user): add email validations</span><br></pre></td></tr></table></figure><h2 id="描述-Description"><a href="#描述-Description" class="headerlink" title="描述(Description)"></a>描述(Description)</h2><p>简明扼要地描述本次提交的效果和目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fix: correct minor typos in code</span><br></pre></td></tr></table></figure><h2 id="正文-Body"><a href="#正文-Body" class="headerlink" title="正文(Body)"></a>正文(Body)</h2><p>正文部分是对本次提交的详细描述，解释为什么要做这个提交，做了什么改动，以及开发的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, if necessary. </span><br><span class="line">Wrap it to about 72 characters or so. </span><br><span class="line">In some contexts, the first line is treated as the subject of an commit and the rest of the text as the body.</span><br></pre></td></tr></table></figure><h2 id="脚注-Footer"><a href="#脚注-Footer" class="headerlink" title="脚注(Footer)"></a>脚注(Footer)</h2><p>脚注用于记录本次提交的一些重要信息，如与某个 issue 相关或者是破坏性的变更。</p><p>Issue #12</p><h2 id="BREAKING-CHANGE"><a href="#BREAKING-CHANGE" class="headerlink" title="BREAKING CHANGE"></a>BREAKING CHANGE</h2><p><code>BREAKING CHANGE</code> 用于标识不兼容的变更，通常包括变更的描述，影响和可能的解决方案。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li><strong>明确标识</strong>: 在提交信息中明确标识 <code>BREAKING CHANGE</code>，以通知团队成员此次提交包含重大变更。</li><li><strong>描述变更</strong>: 在 <code>BREAKING CHANGE</code> 之后详细描述变更的内容，包括变更的原因、主要的不兼容点和可能的解决方案。</li><li><strong>引用相关文档或 Issue</strong>: 如果有相关的文档或 Issue，可以在 <code>BREAKING CHANGE</code> 描述中提供链接，方便团队成员查找更多信息。</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>假设你在一个 JavaScript 项目中修改了一个验证电子邮件的函数的 API，以前是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateEmail</span>(<span class="params">email</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在改为了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateEmail</span>(<span class="params">email, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的提交信息可能是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feat(validate): update validateEmail API</span><br><span class="line"></span><br><span class="line">BREAKING CHANGE: alters validateEmail API to accept an options object, which is a new second argument. This change is introduced to handle multiple validation scenarios more flexibly. </span><br><span class="line"></span><br><span class="line">See the updated documentation for the new API: [link to documentation]</span><br></pre></td></tr></table></figure><p>在这个案例中：</p><ul><li><code>BREAKING CHANGE</code> 标识了这是一个重大变更。</li><li>描述了变更的内容和原因。</li><li>提供了指向更新后文档的链接，以便其他人了解新的 API 用法。</li></ul><p>此规范指南旨在创建清晰、一致且有意义的 Git 提交信息，从而提高代码的可读性和项目的可维护性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Mybatis实现自定义SQL,可视化SQL进行查询</title>
      <link href="2023/07/04/Java/SpringBoot+Mybatis%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89SQL,%E5%8F%AF%E8%A7%86%E5%8C%96SQL%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
      <url>2023/07/04/Java/SpringBoot+Mybatis%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89SQL,%E5%8F%AF%E8%A7%86%E5%8C%96SQL%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><blockquote><p>根据后台维护的SQL执行查询，前端同事调用一个通用接口进行执行，最终反回结果给到前端，参考了市场BI工具，自己通过SpringBoot+Mybatis 手动实现了一个，比较粗糙，大家有更好的建议可以提出到评论区！</p><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>项目采用RuoyiVue版本进行开发，大家可根据自己得框架进行修改，大体逻辑一样</p></blockquote><ol><li>SQL配置类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: SysSqlConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: SQL配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/6/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringStyle;</span><br><span class="line"><span class="keyword">import</span> com.unis.common.annotation.Excel;</span><br><span class="line"><span class="keyword">import</span> com.unis.common.core.domain.BaseEntity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【SQL配置类】对象 sys_sql_config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> aliang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-06-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysSqlConfig</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** $column.columnComment */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** $column.columnComment */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;$&#123;comment&#125;&quot;, readConverterExp = &quot;$column.readConverterExp()&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String moduleKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** sql语句 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;sql语句&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sqlStatement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模块名称 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;模块名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String moduleName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModuleKey</span><span class="params">(String moduleKey)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.moduleKey = moduleKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModuleKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> moduleKey;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlStatement</span><span class="params">(String sqlStatement)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlStatement = sqlStatement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSqlStatement</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlStatement;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModuleName</span><span class="params">(String moduleName)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.moduleName = moduleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModuleName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> moduleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ToStringBuilder(<span class="keyword">this</span>,ToStringStyle.MULTI_LINE_STYLE)</span><br><span class="line">                .append(<span class="string">&quot;id&quot;</span>, getId())</span><br><span class="line">                .append(<span class="string">&quot;moduleKey&quot;</span>, getModuleKey())</span><br><span class="line">                .append(<span class="string">&quot;sqlStatement&quot;</span>, getSqlStatement())</span><br><span class="line">                .append(<span class="string">&quot;createBy&quot;</span>, getCreateBy())</span><br><span class="line">                .append(<span class="string">&quot;createTime&quot;</span>, getCreateTime())</span><br><span class="line">                .append(<span class="string">&quot;updateBy&quot;</span>, getUpdateBy())</span><br><span class="line">                .append(<span class="string">&quot;updateTime&quot;</span>, getUpdateTime())</span><br><span class="line">                .append(<span class="string">&quot;remark&quot;</span>, getRemark())</span><br><span class="line">                .append(<span class="string">&quot;moduleName&quot;</span>, getModuleName())</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>Mapper接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: SysSqlConfigMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/6/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unis.datav.domain.SysSqlConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【请填写功能名称】Mapper接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-06-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysSqlConfigMapper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysSqlConfig <span class="title">selectSysSqlConfigById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectSysSqlConfigByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysSqlConfig&gt; <span class="title">selectSysSqlConfigList</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 需要删除的数据主键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigByIds</span><span class="params">(Long[] ids)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>Service接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: ISysSqlConfigService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/6/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unis.datav.domain.SysSqlConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【请填写功能名称】Service接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-06-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISysSqlConfigService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysSqlConfig <span class="title">selectSysSqlConfigById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectSysSqlConfigByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysSqlConfig&gt; <span class="title">selectSysSqlConfigList</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 需要删除的【请填写功能名称】主键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigByIds</span><span class="params">(Long[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除【请填写功能名称】信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>接口实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: SysSqlConfigServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/6/30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unis.common.utils.DateUtils;</span><br><span class="line"><span class="keyword">import</span> com.unis.datav.domain.SysSqlConfig;</span><br><span class="line"><span class="keyword">import</span> com.unis.datav.mapper.SysSqlConfigMapper;</span><br><span class="line"><span class="keyword">import</span> com.unis.datav.service.ISysSqlConfigService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【请填写功能名称】Service业务层处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ruoyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-06-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysSqlConfigServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISysSqlConfigService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysSqlConfigMapper sysSqlConfigMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysSqlConfig <span class="title">selectSysSqlConfigById</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.selectSysSqlConfigById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectSysSqlConfigByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.selectSysSqlConfigByKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询【请填写功能名称】列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysSqlConfig&gt; <span class="title">selectSysSqlConfigList</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.selectSysSqlConfigList(sysSqlConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sysSqlConfig.setCreateTime(DateUtils.getNowDate());</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.insertSysSqlConfig(sysSqlConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysSqlConfig 【请填写功能名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateSysSqlConfig</span><span class="params">(SysSqlConfig sysSqlConfig)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sysSqlConfig.setUpdateTime(DateUtils.getNowDate());</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.updateSysSqlConfig(sysSqlConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除【请填写功能名称】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids 需要删除的【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigByIds</span><span class="params">(Long[] ids)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.deleteSysSqlConfigByIds(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除【请填写功能名称】信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 【请填写功能名称】主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteSysSqlConfigById</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysSqlConfigMapper.deleteSysSqlConfigById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>Mapper.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.unis.datav.mapper.SysSqlConfigMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;SysSqlConfig&quot;</span> <span class="attr">id</span>=<span class="string">&quot;SysSqlConfigResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;moduleKey&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;module_key&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sqlStatement&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;sql_statement&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createBy&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;create_by&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;updateBy&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;update_by&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;remark&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;remark&quot;</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;moduleName&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;module_name&quot;</span>    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectSysSqlConfigVo&quot;</span>&gt;</span></span><br><span class="line">        select id, module_key, sql_statement, create_by, create_time, update_by, update_time, remark, module_name from sys_sql_config</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectSysSqlConfigList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;SysSqlConfig&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;SysSqlConfigResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectSysSqlConfigVo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleKey != null  and moduleKey != &#x27;&#x27;&quot;</span>&gt;</span> and module_key = #&#123;moduleKey&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sqlStatement != null  and sqlStatement != &#x27;&#x27;&quot;</span>&gt;</span> and sql_statement = #&#123;sqlStatement&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleName != null  and moduleName != &#x27;&#x27;&quot;</span>&gt;</span> and module_name like concat(&#x27;%&#x27;, #&#123;moduleName&#125;, &#x27;%&#x27;)<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectSysSqlConfigById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;SysSqlConfigResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectSysSqlConfigVo&quot;</span>/&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectSysSqlConfigByKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        select sql_statement from sys_sql_config</span><br><span class="line">        where module_key = #&#123;key&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertSysSqlConfig&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;SysSqlConfig&quot;</span>&gt;</span></span><br><span class="line">        insert into sys_sql_config</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;(&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>id,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleKey != null&quot;</span>&gt;</span>module_key,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sqlStatement != null&quot;</span>&gt;</span>sql_statement,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createBy != null&quot;</span>&gt;</span>create_by,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span>create_time,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateBy != null&quot;</span>&gt;</span>update_by,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_time,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark != null&quot;</span>&gt;</span>remark,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleName != null&quot;</span>&gt;</span>module_name,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;values (&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;)&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>#&#123;id&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleKey != null&quot;</span>&gt;</span>#&#123;moduleKey&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sqlStatement != null&quot;</span>&gt;</span>#&#123;sqlStatement&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createBy != null&quot;</span>&gt;</span>#&#123;createBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span>#&#123;createTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateBy != null&quot;</span>&gt;</span>#&#123;updateBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>#&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark != null&quot;</span>&gt;</span>#&#123;remark&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleName != null&quot;</span>&gt;</span>#&#123;moduleName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSysSqlConfig&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;SysSqlConfig&quot;</span>&gt;</span></span><br><span class="line">        update sys_sql_config</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleKey != null&quot;</span>&gt;</span>module_key = #&#123;moduleKey&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sqlStatement != null&quot;</span>&gt;</span>sql_statement = #&#123;sqlStatement&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createBy != null&quot;</span>&gt;</span>create_by = #&#123;createBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime != null&quot;</span>&gt;</span>create_time = #&#123;createTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateBy != null&quot;</span>&gt;</span>update_by = #&#123;updateBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_time = #&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;remark != null&quot;</span>&gt;</span>remark = #&#123;remark&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;moduleName != null&quot;</span>&gt;</span>module_name = #&#123;moduleName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteSysSqlConfigById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">        delete from sys_sql_config where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteSysSqlConfigByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        delete from sys_sql_config where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>共用查询Mapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: CustomQueryMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/4</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomQueryMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;$&#123;query&#125;&quot;)</span></span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; executeQuery(String query);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>查询Service<blockquote><p><strong>这里面根据SQL里的标签进行匹配和替换，核心方法</strong></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.unis.datav.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unis.datav.mapper.CustomQueryMapper;</span><br><span class="line"><span class="keyword">import</span> com.unis.datav.service.ISysSqlConfigService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span>: QueryService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO 类描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 阿良</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/4</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  ISysSqlConfigService sqlQueryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  CustomQueryMapper customQueryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor injection for dependencies</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; executeQuery(String identifier, Map&lt;String, Object&gt; parameters) &#123;</span><br><span class="line">        <span class="comment">// get the query from the database</span></span><br><span class="line">        String query = sqlQueryRepository.selectSysSqlConfigByKey(identifier);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process the query to replace custom tags with actual parameters</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;&lt;(.*?)&gt;(.*?)&lt;/\\1&gt;&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(query);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String tag = matcher.group(<span class="number">1</span>);</span><br><span class="line">            Object value = parameters.get(tag);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Check if the value is a string</span></span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    value = <span class="string">&quot;&#x27;&quot;</span> + value + <span class="string">&quot;&#x27;&quot;</span>;  <span class="comment">// Add single quotes around the string</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Create the replacement string</span></span><br><span class="line">                String replacement = matcher.group(<span class="number">2</span>).replace(<span class="string">&quot;?&#123;&quot;</span> + tag + <span class="string">&quot;&#125;&quot;</span>, value.toString());</span><br><span class="line">                <span class="comment">// Replace the tag with the replacement string</span></span><br><span class="line">                matcher.appendReplacement(sb, replacement);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the value is not present in the parameters, remove the tag entirely</span></span><br><span class="line">                matcher.appendReplacement(sb, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matcher.appendTail(sb);</span><br><span class="line">        <span class="comment">// execute the query and return the result</span></span><br><span class="line">        <span class="keyword">return</span> customQueryMapper.executeQuery(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select distinct B.ID 流水号, B.USER_INFO_ID 人员ID, B.SCHOOL_NAME 学院, B.START_DATE 入学日期, B.GRADUATE_DATE 毕业日期, B.MAJOR_NAME 专业名称, B.EDUCATION 学历, B.DEGREE 学位, B.CREATER 创建人, B.CREATE_TIME 创建时间, A.NAME 姓名, B.UPDATER 更新人 from HR_STAFF_EDU_INFO B left join hr_staff_info A ON A.USER_INFO_ID=B.USER_INFO_ID where 1=1 &lt;peopleid&gt;and B.USER_INFO_ID=?&#123;peopleid&#125;&lt;/peopleid&gt;;&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;&gt;();  <span class="comment">// your parameters</span></span><br><span class="line">        parameters.put(<span class="string">&quot;peopleid&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;&lt;(.*?)&gt;(.*?)&lt;/\\1&gt;&quot;</span>);</span><br><span class="line">        Matcher matcher = pattern.matcher(sql);</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            String tag = matcher.group(<span class="number">1</span>);</span><br><span class="line">            Object value = parameters.get(tag);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Create the replacement string</span></span><br><span class="line">                String replacement = matcher.group(<span class="number">2</span>).replace(<span class="string">&quot;?&#123;&quot;</span> + tag + <span class="string">&quot;&#125;&quot;</span>, value.toString());</span><br><span class="line">                <span class="comment">// Replace the tag with the replacement string</span></span><br><span class="line">                matcher.appendReplacement(sb, replacement);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the value is not present in the parameters, remove the tag entirely</span></span><br><span class="line">                matcher.appendReplacement(sb, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matcher.appendTail(sb);</span><br><span class="line"></span><br><span class="line">        sql = sb.toString();</span><br><span class="line">        System.out.println(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>接口调用 传参<blockquote><p><code>identifier</code> 参数对应sql配置表中的唯一标识<br><code>parameters</code> 参数对应要执行的查询参数Map形式 例如<code>&#123; &quot;peopleid&quot;: &quot;181722_19633&quot;&#125;</code></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/query/&#123;identifier&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span>  List&lt;Map&lt;String,Object&gt;&gt; executeQuery(<span class="meta">@PathVariable</span> String  identifier, <span class="meta">@RequestBody</span> Map&lt;String, Object&gt; parameters) &#123;</span><br><span class="line">       <span class="comment">// execute the query and return the result</span></span><br><span class="line">       <span class="keyword">return</span> queryService.executeQuery(identifier, parameters);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1688444359/Java/160706e9d08c4875b3a1cc05df600344_ynsgeb.png" alt="调用接口"><br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1688444358/Java/3aa197ed11654a478fe138adb9ab4366_cyfwe8.png" alt="界面配置"><br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1688444360/Java/a43d3a36fa894b2c9b0dbf65794ba1fb_qbwovo.png" alt="界面配置"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>提示：此方式是否存在问题目前还没验证，简单实现，大家有更好的办法或者解决方案欢迎留言评论！</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - Git个人学习记录手册-02</title>
      <link href="2023/06/18/Git/gitlearn02/"/>
      <url>2023/06/18/Git/gitlearn02/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本篇教程是自己学习 Git 记录的<br>本篇教程不会介绍 Git 背景以及一些专业知识，毕竟本人时间有限哈哈哈！<br>如果喜欢教程就评论下或者把站点添加到你宝贵的收藏夹里面吧</p></div><h1 id="Git-个人学习记录手册-第二部分"><a href="#Git-个人学习记录手册-第二部分" class="headerlink" title="Git 个人学习记录手册 - 第二部分"></a>Git 个人学习记录手册 - 第二部分</h1><p>在<a href="http://localhost:4000/2021/01/21/Git/gitlearn/">上一篇文章</a>中，我们介绍了 Git 的基本概念和一些基础操作。在这篇文章中，我们将深入探讨一些更复杂的 Git 操作，如分支管理、冲突解决等。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#GitHubDeskTop的使用">GitHubDeskTop的使用</a></li><li><a href="#总结">总结</a></li></ol><h2 id="GitHubDeskTop的使用"><a href="#GitHubDeskTop的使用" class="headerlink" title="GitHubDeskTop的使用"></a>GitHubDeskTop的使用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go - Go语言Web开发框架介绍及简单使用</title>
      <link href="2022/11/27/go/Go%E8%AF%AD%E8%A8%80Web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6Gin/"/>
      <url>2022/11/27/go/Go%E8%AF%AD%E8%A8%80Web%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6Gin/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>我们做Java开发的时候 做Web开发脱离不了框架 例如 <code>Spring</code> <code>Mybatis</code> 等开发框架，当然我们学习Go 也可以作为Web开发来使用,就会用到接下来介绍的框架。</p><p>​                                                                                                                        — 屏幕前的你一定是个很温柔的人吧</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Gin是一个golang的微框架，封装比较优雅，API友好，源码注释比较明确，具有快速灵活，容错方便等特点</li><li>对于golang而言，web框架的依赖要远比Python，Java之类的要小。自身的<code>net/http</code>足够简单，性能也非常不错</li><li>借助框架开发，不仅可以省去很多常用的封装带来的时间，也有助于团队的编码风格和形成规范</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要安装Gin软件包，您需要安装Go并首先设置Go工作区。</p><p>1.首先需要安装Go（需要1.10+版本），然后可以使用下面的Go命令安装Gin。</p><blockquote><p>go get -u github.com/gin-gonic/gin</p></blockquote><p>2.将其导入您的代码中：</p><blockquote><p>import “github.com/gin-gonic/gin”</p></blockquote><p>3.（可选）导入net/http。例如，如果使用常量，则需要这样做http.StatusOK。</p><blockquote><p>import “net/http”</p></blockquote><h2 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/thinkerou/favicon&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">server := gin.Default()</span><br><span class="line"><span class="comment">//设置 favicon </span></span><br><span class="line">server.Use(favicon.New(<span class="string">&quot;./fic.jpg&quot;</span>))</span><br><span class="line"><span class="comment">//设置get接口</span></span><br><span class="line">server.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(context *gin.Context)</span></span> &#123;</span><br><span class="line">context.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;go---阿良&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//指定端口</span></span><br><span class="line">server.Run(<span class="string">&quot;:8082&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h2><ul><li>gin 框架中采用的路由库是基于httprouter做的</li><li>地址为：<a href="https://github.com/julienschmidt/httprouter">https://github.com/julienschmidt/httprouter</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.String(http.StatusOK, <span class="string">&quot;hello word&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.POST(<span class="string">&quot;/xxxpost&quot;</span>,getting)</span><br><span class="line">    r.PUT(<span class="string">&quot;/xxxput&quot;</span>)</span><br><span class="line">    <span class="comment">//监听端口默认为8080</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Restful风格的API"><a href="#Restful风格的API" class="headerlink" title="Restful风格的API"></a>Restful风格的API</h2><ul><li>gin支持Restful风格的API</li><li>即Representational State Transfer的缩写。直接翻译的意思是”表现层状态转化”，是一种互联网应用程序的API设计理念：URL定位资源，用HTTP描述操作</li></ul><p>1.获取文章 /blog/getXxx Get blog/Xxx</p><p>2.添加 /blog/addXxx POST blog/Xxx</p><p>3.修改 /blog/updateXxx PUT blog/Xxx</p><p>4.删除 /blog/delXxxx DELETE blog/Xxx</p><h2 id="API参数"><a href="#API参数" class="headerlink" title="API参数"></a>API参数</h2><ul><li>可以通过Context的Param方法来获取API参数</li><li>localhost:8000/xxx/zhangsan</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/user/:name/*action&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        action := c.Param(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">        <span class="comment">//截取/</span></span><br><span class="line">        action = strings.Trim(action, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        c.String(http.StatusOK, name+<span class="string">&quot; is &quot;</span>+action)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//默认为监听8080端口</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h2><ul><li>URL参数可以通过DefaultQuery()或Query()方法获取</li><li>DefaultQuery()若参数不村则，返回默认值，Query()若不存在，返回空串</li><li>API?name=zs</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">//指定默认值</span></span><br><span class="line">        <span class="comment">//http://localhost:8080/user 才会打印出来默认的值</span></span><br><span class="line">        name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;枯藤&quot;</span>)</span><br><span class="line">        c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;hello %s&quot;</span>, name))</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单参数"><a href="#表单参数" class="headerlink" title="表单参数"></a>表单参数</h2><ul><li>表单传输为post请求，http常见的传输格式为四种：<ul><li>application/json</li><li>application/x-www-form-urlencoded</li><li>application/xml</li><li>multipart/form-data</li></ul></li><li>表单参数可以通过PostForm()方法获取，该方法默认解析的是x-www-form-urlencoded或from-data格式的参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的用户名&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的密码&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.POST(<span class="string">&quot;/form&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        types := c.DefaultPostForm(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;post&quot;</span>)</span><br><span class="line">        username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password := c.PostForm(<span class="string">&quot;userpassword&quot;</span>)</span><br><span class="line">        <span class="comment">// c.String(http.StatusOK, fmt.Sprintf(&quot;username:%s,password:%s,type:%s&quot;, username, password, types))</span></span><br><span class="line">        c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;username:%s,password:%s,type:%s&quot;</span>, username, password, types))</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://www.topgoer.com/static/gin/1.1/5.png" alt="img"></p><p><img src="https://www.topgoer.com/static/gin/1.1/6.png" alt="img"></p><h2 id="上传单个文件"><a href="#上传单个文件" class="headerlink" title="上传单个文件"></a>上传单个文件</h2><ul><li>multipart/form-data格式用于文件上传</li><li>gin文件上传与原生的net/http方法类似，不同在于gin把原生的request封装到c.Request中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">          上传文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    <span class="comment">//限制上传最大尺寸</span></span><br><span class="line">    r.MaxMultipartMemory = <span class="number">8</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">    r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            c.String(<span class="number">500</span>, <span class="string">&quot;上传图片出错&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// c.JSON(200, gin.H&#123;&quot;message&quot;: file.Header.Context&#125;)</span></span><br><span class="line">        c.SaveUploadedFile(file, file.Filename)</span><br><span class="line">        c.String(http.StatusOK, file.Filename)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="https://www.topgoer.com/static/gin/1.1/7.png" alt="img"></p><p><img src="https://www.topgoer.com/static/gin/1.1/8.png" alt="img"></p><h3 id="上传特定文件"><a href="#上传特定文件" class="headerlink" title="上传特定文件"></a>上传特定文件</h3><p>有的用户上传文件需要限制上传文件的类型以及上传文件的大小，但是gin框架暂时没有这些函数(也有可能是我没找到)，因此基于原生的函数写法自己写了一个可以限制大小以及文件类型的上传函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        _, headers, err := c.Request.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;Error when try to get file: %v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//headers.Size 获取文件大小</span></span><br><span class="line">        <span class="keyword">if</span> headers.Size &gt; <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;文件太大了&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//headers.Header.Get(&quot;Content-Type&quot;)获取上传文件的类型</span></span><br><span class="line">        <span class="keyword">if</span> headers.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;image/png&quot;</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;只允许上传png图片&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.SaveUploadedFile(headers, <span class="string">&quot;./video/&quot;</span>+headers.Filename)</span><br><span class="line">        c.String(http.StatusOK, headers.Filename)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8000/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">          上传文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">   <span class="string">&quot;net/http&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// gin的helloWorld</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 1.创建路由</span></span><br><span class="line">   <span class="comment">// 默认使用了2个中间件Logger(), Recovery()</span></span><br><span class="line">   r := gin.Default()</span><br><span class="line">   <span class="comment">// 限制表单上传大小 8MB，默认为32MB</span></span><br><span class="line">   r.MaxMultipartMemory = <span class="number">8</span> &lt;&lt; <span class="number">20</span></span><br><span class="line">   r.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">      form, err := c.MultipartForm()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         c.String(http.StatusBadRequest, fmt.Sprintf(<span class="string">&quot;get err %s&quot;</span>, err.Error()))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取所有图片</span></span><br><span class="line">      files := form.File[<span class="string">&quot;files&quot;</span>]</span><br><span class="line">      <span class="comment">// 遍历所有图片</span></span><br><span class="line">      <span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">         <span class="comment">// 逐个存</span></span><br><span class="line">         <span class="keyword">if</span> err := c.SaveUploadedFile(file, file.Filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            c.String(http.StatusBadRequest, fmt.Sprintf(<span class="string">&quot;upload err %s&quot;</span>, err.Error()))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      c.String(<span class="number">200</span>, fmt.Sprintf(<span class="string">&quot;upload ok %d files&quot;</span>, <span class="built_in">len</span>(files)))</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//默认端口号是8080</span></span><br><span class="line">   r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="https://www.topgoer.com/static/gin/1.1/9.png" alt="img"></p><p><img src="https://www.topgoer.com/static/gin/1.1/10.png" alt="img"></p><h2 id="routes-group"><a href="#routes-group" class="headerlink" title="routes group"></a>routes group</h2><ul><li>routes group是为了管理一些相同的URL</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin的helloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 1.创建路由</span></span><br><span class="line">   <span class="comment">// 默认使用了2个中间件Logger(), Recovery()</span></span><br><span class="line">   r := gin.Default()</span><br><span class="line">   <span class="comment">// 路由组1 ，处理GET请求</span></span><br><span class="line">   v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">   <span class="comment">// &#123;&#125; 是书写规范</span></span><br><span class="line">   &#123;</span><br><span class="line">      v1.GET(<span class="string">&quot;/login&quot;</span>, login)</span><br><span class="line">      v1.GET(<span class="string">&quot;submit&quot;</span>, submit)</span><br><span class="line">   &#125;</span><br><span class="line">   v2 := r.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      v2.POST(<span class="string">&quot;/login&quot;</span>, login)</span><br><span class="line">      v2.POST(<span class="string">&quot;/submit&quot;</span>, submit)</span><br><span class="line">   &#125;</span><br><span class="line">   r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jack&quot;</span>)</span><br><span class="line">   c.String(<span class="number">200</span>, fmt.Sprintf(<span class="string">&quot;hello %s\n&quot;</span>, name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">submit</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">   name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lily&quot;</span>)</span><br><span class="line">   c.String(<span class="number">200</span>, fmt.Sprintf(<span class="string">&quot;hello %s\n&quot;</span>, name))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果演示:</p><p><img src="https://www.topgoer.com/static/gin/1.1/11.png" alt="img"></p><h2 id="路由原理"><a href="#路由原理" class="headerlink" title="路由原理"></a>路由原理</h2><ul><li>httproter会将所有路由规则构造一颗前缀树</li><li>例如有 root and as at cn com</li></ul><p><img src="https://www.topgoer.com/static/gin/1.1/12.png" alt="img"></p><h2 id="路由拆分与注册"><a href="#路由拆分与注册" class="headerlink" title="路由拆分与注册"></a>路由拆分与注册</h2><h3 id="基本的路由注册"><a href="#基本的路由注册" class="headerlink" title="基本的路由注册"></a>基本的路由注册</h3><p>下面最基础的gin路由注册方式，适用于路由条目比较少的简单项目或者项目demo。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello www.topgoer.com!&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/topgoer&quot;</span>, helloHandler)</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由拆分成单独文件或包"><a href="#路由拆分成单独文件或包" class="headerlink" title="路由拆分成单独文件或包"></a>路由拆分成单独文件或包</h3><p>当项目的规模增大后就不太适合继续在项目的main.go文件中去实现路由注册相关逻辑了，我们会倾向于把路由部分的代码都拆分出来，形成一个单独的文件或包：</p><p>我们在routers.go文件中定义并注册路由信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello www.topgoer.com!&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupRouter</span><span class="params">()</span> *<span class="title">gin</span>.<span class="title">Engine</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/topgoer&quot;</span>, helloHandler)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时main.go中调用上面定义好的setupRouter函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := setupRouter()</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的目录结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gin_demo</span><br><span class="line">├── <span class="keyword">go</span>.mod</span><br><span class="line">├── <span class="keyword">go</span>.sum</span><br><span class="line">├── main.<span class="keyword">go</span></span><br><span class="line">└── routers.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>把路由部分的代码单独拆分成包的话也是可以的，拆分后的目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gin_demo</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── routers</span><br><span class="line">    └── routers.go</span><br></pre></td></tr></table></figure><p>routers/routers.go需要注意此时setupRouter需要改成首字母大写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello www.topgoer.com&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetupRouter 配置路由信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupRouter</span><span class="params">()</span> *<span class="title">gin</span>.<span class="title">Engine</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/topgoer&quot;</span>, helloHandler)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.go文件内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;gin_demo/routers&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := routers.SetupRouter()</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由拆分成多个文件"><a href="#路由拆分成多个文件" class="headerlink" title="路由拆分成多个文件"></a>路由拆分成多个文件</h3><p>当我们的业务规模继续膨胀，单独的一个routers文件或包已经满足不了我们的需求了，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupRouter</span><span class="params">()</span> *<span class="title">gin</span>.<span class="title">Engine</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/topgoer&quot;</span>, helloHandler)</span><br><span class="line">  r.GET(<span class="string">&quot;/xx1&quot;</span>, xxHandler1)</span><br><span class="line">  ...</span><br><span class="line">  r.GET(<span class="string">&quot;/xx30&quot;</span>, xxHandler30)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们把所有的路由注册都写在一个SetupRouter函数中的话就会太复杂了。</p><p>我们可以分开定义多个路由文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gin_demo</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── routers</span><br><span class="line">    ├── blog.go</span><br><span class="line">    └── shop.go</span><br></pre></td></tr></table></figure><p>routers/shop.go中添加一个LoadShop的函数，将shop相关的路由注册到指定的路由器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func LoadShop(e *gin.Engine)  &#123;</span><br><span class="line">    e.GET(&quot;/hello&quot;, helloHandler)</span><br><span class="line">  e.GET(&quot;/goods&quot;, goodsHandler)</span><br><span class="line">  e.GET(&quot;/checkout&quot;, checkoutHandler)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/blog.go中添加一个LoadBlog的函数，将blog相关的路由注册到指定的路由器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadBlog</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">    e.GET(<span class="string">&quot;/post&quot;</span>, postHandler)</span><br><span class="line">  e.GET(<span class="string">&quot;/comment&quot;</span>, commentHandler)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数中实现最终的注册逻辑如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    routers.LoadBlog(r)</span><br><span class="line">    routers.LoadShop(r)</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由拆分到不同的APP"><a href="#路由拆分到不同的APP" class="headerlink" title="路由拆分到不同的APP"></a>路由拆分到不同的APP</h3><p>有时候项目规模实在太大，那么我们就更倾向于把业务拆分的更详细一些，例如把不同的业务代码拆分成不同的APP。</p><p>因此我们在项目目录下单独定义一个app目录，用来存放我们不同业务线的代码文件，这样就很容易进行横向扩展。大致目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gin_demo</span><br><span class="line">├── app</span><br><span class="line">│   ├── blog</span><br><span class="line">│   │   ├── handler.go</span><br><span class="line">│   │   └── router.go</span><br><span class="line">│   └── shop</span><br><span class="line">│       ├── handler.go</span><br><span class="line">│       └── router.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── routers</span><br><span class="line">    └── routers.go</span><br></pre></td></tr></table></figure><p>其中app/blog/router.go用来定义post相关路由信息，具体内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Routers</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">    e.GET(<span class="string">&quot;/post&quot;</span>, postHandler)</span><br><span class="line">    e.GET(<span class="string">&quot;/comment&quot;</span>, commentHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app/shop/router.go用来定义shop相关路由信息，具体内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Routers</span><span class="params">(e *gin.Engine)</span></span> &#123;</span><br><span class="line">    e.GET(<span class="string">&quot;/goods&quot;</span>, goodsHandler)</span><br><span class="line">    e.GET(<span class="string">&quot;/checkout&quot;</span>, checkoutHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>routers/routers.go中根据需要定义Include函数用来注册子app中定义的路由，Init函数用来进行路由的初始化操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*gin.Engine)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = []Option&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册app的路由配置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Include</span><span class="params">(opts ...Option)</span></span> &#123;</span><br><span class="line">    options = <span class="built_in">append</span>(options, opts...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">gin</span>.<span class="title">Engine</span></span> &#123;</span><br><span class="line">    r := gin.New()</span><br><span class="line">    <span class="keyword">for</span> _, opt := <span class="keyword">range</span> options &#123;</span><br><span class="line">        opt(r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.go中按如下方式先注册子app中的路由，然后再进行路由的初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 加载多个APP的路由配置</span></span><br><span class="line">    routers.Include(shop.Routers, blog.Routers)</span><br><span class="line">    <span class="comment">// 初始化路由</span></span><br><span class="line">    r := routers.Init()</span><br><span class="line">    <span class="keyword">if</span> err := r.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;startup service failed, err:%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="https://www.liwenzhou.com/posts/Go/gin_routes_registry/">https://www.liwenzhou.com/posts/Go/gin_routes_registry/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go - Go的基础环境安装</title>
      <link href="2022/11/27/go/Go%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>2022/11/27/go/Go%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>时光然然 Java已经干了4年多虽然很多知识还是不会，但是Java整体体系大概摸清了。</p><p>我一直在思索未来要做什么，思考了几次后，思考起了未来，认为 云原生、区块链 在未来会爆发，那么 Go 语言就变得很重要了，以后尽量多学一学Go语言，尽量做到体系化学习。</p><p>​                                                                                                                                — 阿良 唯有热爱，能抵岁月漫长 </p></blockquote><h1 id="语言环境安装：Windows-下安装-Go"><a href="#语言环境安装：Windows-下安装-Go" class="headerlink" title="语言环境安装：Windows 下安装 Go"></a>语言环境安装：Windows 下安装 Go</h1><p>Windows 安装包：点击进入官方下载</p><p><img src="https://cdn.learnku.com/uploads/images/201905/24/21793/ZLFeozMINM.png!large" alt="Windows 开发环境"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>打开下载完的 Windows Installer 程序包 (.msi) 进行安装，默认情况下.msi 文件会安装在 c:\Go 目录下，可选择自定义路径进行安装。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>安装完毕后，打开命令行程序，输入：<br>go help</p><p>返回结果如下则代表安装成功：</p><p><img src="https://cdn.learnku.com/uploads/images/201905/24/21793/DM3iyiZwtw.png!large" alt="Windows 开发环境"></p><h1 id="Go-语言环境安装：Mac-下安装-Go"><a href="#Go-语言环境安装：Mac-下安装-Go" class="headerlink" title="Go 语言环境安装：Mac 下安装 Go"></a>Go 语言环境安装：Mac 下安装 Go</h1><p>在 Mac 系统中安装 Go 的方式有很多种，这里我们介绍最简单方便的一种，那就是使用 Google 为 Mac 用户提供的已编译好的二进制软件安装包，我们只需下载并安装软件包就可以进行 Go 程序的开发了。</p><h2 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h2><p><strong>注意</strong>： 如果是从旧版本的 Go 升级，必须先卸载现有版本。</p><p>首先访问 golang.google.cn/dl/ ，点击 Apple macOS 中的链接下载软件包至本地。</p><p><img src="https://cdn.learnku.com/uploads/images/201905/20/7636/ZPVXXyYg7O.png!large" alt="下载"></p><p>然后运行软件包，遵照提示点几下按钮就安装好了。安装程序将安装 Go 编译器、工具、库文件至 /usr/local/go 目录，并把<code>/usr/local/go/bin</code>目录添加至 PATH 环境变量中，这样用户就可在任意路径下访问此目录中的可执行文件了。</p><p><img src="https://cdn.learnku.com/uploads/images/201905/20/7636/bbwBqSLXy0.png!large" alt="安装成功"></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>安装完成后，可通过配置工作区目录并构建一个简单的程序来检查 Go 是否是正确安装的。</p><p>在你的用户目录（$HOME）下创建一个 <code>go</code> 子目录，这是默认的 Go 工作区目录，如果你想将工作区目录设置为其它目录，那你需要自己额外设置 GOPATH 环境变量指向那个目录。</p><p>在工作区目录中再创建一个 <code>src/hello</code> 子目录，并在这个子目录下新建一个<code>hello.go</code> 文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;hello, world\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在终端中，进入<code>src/hello</code> 目录并输入 <code>go build</code>命令编译该程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$HOME</span>/go/src/hello</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> go build</span></span><br></pre></td></tr></table></figure><p>此命令将在 <code>src/hello</code> 目录中构建生成一个名为 hello 的二进制可执行文件。执行它，如果输出了 hello, world 问候语：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./hello</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><p>那么，恭喜你，你的 Go 环境是正确安装的。</p><p>可以运行 <code>go install</code> 安装这个二进制可执行文件至你的工作区目录中的 bin 子目录，也可以运行 <code>go clean -i</code>删除它。</p><h3 id="安装多个版本的-Go"><a href="#安装多个版本的-Go" class="headerlink" title="安装多个版本的 Go"></a>安装多个版本的 Go</h3><p>有时，为确保我们的程序包在多个 Go 版本中都能测试通过，我们需要在同一台电脑上安装多个 Go 版本。那么只要你安装好了一个版本的 Go，就可以通过 <code>go get</code> 命令来安装其它版本的 Go，假设我们要安装 1.10.7 版本的 Go，可输入以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get golang.org/dl/go1.10.7</span></span><br></pre></td></tr></table></figure><br>在命令执行完成后，我们可以在工作区目录的 bin 子目录中看到多出了个名为 go1.10.7 的可执行文件，然后用这个可执行文件下载该版本对应的 SDK 包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$HOME</span>/go/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./go1.10.7 download</span></span><br><span class="line">Downloaded   0.0% (   15175 / 90335150 bytes) ...</span><br><span class="line">Downloaded   0.1% (   97083 / 90335150 bytes) ...</span><br><span class="line">Downloaded   0.5% (  490299 / 90335150 bytes) ...</span><br><span class="line">Downloaded   1.5% ( 1325883 / 90335150 bytes) ...</span><br><span class="line">Downloaded   3.1% ( 2833211 / 90335150 bytes) ...</span><br><span class="line">Downloaded   5.4% ( 4881211 / 90335150 bytes) ...</span><br><span class="line">Downloaded   7.4% ( 6667067 / 90335150 bytes) ...</span><br><span class="line">Downloaded   9.6% ( 8665915 / 90335150 bytes) ...</span><br><span class="line">Downloaded  11.7% (10566459 / 90335150 bytes) ...</span><br><span class="line">Downloaded  15.1% (13646651 / 90335150 bytes) ...</span><br><span class="line">Downloaded  17.3% (15645499 / 90335150 bytes) ...</span><br><span class="line">Downloaded  20.9% (18856763 / 90335150 bytes) ...</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Downloaded  97.0% (87636795 / 90335150 bytes) ...</span><br><span class="line">Downloaded  99.9% (90225467 / 90335150 bytes) ...</span><br><span class="line">Downloaded 100.0% (90335150 / 90335150 bytes)</span><br><span class="line">Unpacking /Users/xxxxx/sdk/go1.10.7/go1.10.7.darwin-amd64.tar.gz ...</span><br><span class="line">Success. You may now run &#x27;go1.10.7&#x27;</span><br></pre></td></tr></table></figure><br>SDK 下载完成后，可以象下面这样使用这个新下载的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go1.10.7 version</span></span><br><span class="line">go version go1.10.7 linux/amd64</span><br></pre></td></tr></table></figure><p>能够用此方法安装的所有 Go 版本列出在 下载页 中。如果你想知道这些 Go 版本的安装位置，可以通过环境变量 GOROOT 来获得其安装位置。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go1.10.7 env GOROOT</span></span><br><span class="line">/Users/xxxxx/sdk/go1.10.7</span><br></pre></td></tr></table></figure><p>要卸载额外安装的版本，只需删除其 GOROOT 环境变量对应的目录和存在于 Go 工作区 bin 子目录中的 goX.Y.Z 二进制文件。</p><p>卸载 Go<br>要卸载系统中已有的 Go，删除 <code>/usr/local/go</code> 目录即可。</p><p>另外还应从 PATH 环境变量中将<code>/usr/local/go/bin</code>移除。 因为我们是通过软件包安装的 Go，那么直接删除 <code>/etc/paths.d/go</code>文件就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>娱乐 - 羊了个羊无限刷皮肤和通关教程，支持免root的安卓手机！</title>
      <link href="2022/09/19/Game/ylgy/"/>
      <url>2022/09/19/Game/ylgy/</url>
      
        <content type="html"><![CDATA[<p><code>你还在担心羊了个羊第二关怎么过吗？这么难，通关不了？不要担心，接下来铺主就教大家用无限刷羊了个羊皮肤和通关的教程，目前只支持安卓手机，不需要root，如果苹果用户越狱能找到目录文件，也是可以按照步骤来的！</code></p><h4 id="截止2022-9-19亲测依然有效！"><a href="#截止2022-9-19亲测依然有效！" class="headerlink" title="截止2022.9.19亲测依然有效！"></a>截止2022.9.19亲测依然有效！</h4><ol><li><p>下载mt管理器（如果有就跳过）<a href="https://wwt.lanzouj.com/i6WYT0bv55be">https://wwt.lanzouj.com/i6WYT0bv55be</a></p></li><li><p>打开手机自带的设置面板，点击系统与更新&gt;找到日期和时间&gt;把日期改成九月十五号&gt;然后打开羊了个羊小程序，可以看到无法开始。</p></li><li><p>返回到设置，把日期改成最新的时间，再返回羊了个羊，就会正常了。</p></li><li><p>接着打开mt管理器，点击最上方的路径，输入跳转到这个目录<code>（/storage/emulated/0/Android/data/com.tencent.mm/MicroMsg/wxanewfiles）</code>安卓11以上需要授权，按MT管理器的提示来即可。</p></li><li><p>跳转目录后，点击右上角的三个点，选择搜索，再点击高级搜索，在（文件中包含内容）下面输入<code>90019</code>，其中19代表现在的日期，今天是9月19号，那么就是<code>90019</code>，同样的道理，如果是20号，就搜索<code>90020</code></p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1663555372/20220919081203083003_xzwguo.jpg" alt="mt管理器"></p></li><li><p>点击确定，一般会找到两到三个文件（记得点击左下角的放大图标，方便搜索结果的修改。如果没有找到文件，建议去游戏里玩一下，可能文件没生成！）第一个不用管，如果只搜到两个，那么就修改第二个，如果搜到了三个，那么第二个和第三个都要修改。点击文件后，进入编辑界面，还是点击右上角的三个点，选择搜索，选择替换，把90017换成80001，如果是18号就把90018替换成80001，替换完成后点击保存（如果不会替换的话，直接找到对应的代码修改保存就好，很好找的！）。不过铺主在搜索的时候，只找到一个文件，修改那一个文件也就可以。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1663555372/20220919081203129002_x3honp.jpg" alt=""></p></li></ol><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1663555372/20220917205922066012_cfnocm.jpg" alt=""></p><p><strong>aliang测试下来，新皮肤是可以一直刷出来的，通关次数好像只有几次。具体你们可以自己试试看。刷的差不多，要变回正常的话，需要回到管理器把之前那个目录文件的代码改回来即可。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Aliang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js - 逻辑运算符、断路运算符的应用</title>
      <link href="2022/09/13/JsLearn/Js%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%AD%E8%B7%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>2022/09/13/JsLearn/Js%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%AD%E8%B7%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1、逻辑运算符"><a href="#1、逻辑运算符" class="headerlink" title="1、逻辑运算符"></a>1、逻辑运算符</h3><ol><li><p>&amp;&amp;</p><p>例如 a&amp;&amp;b </p><p>解释1：只要&amp;&amp;前面是false 都会反回这个值 。</p><p>解释2：只要&amp;&amp;前面是true，无论后面是true还是false都将反回&amp;&amp;后面的值。</p></li><li><p>||</p><p>例如 a||b</p><p>解释1：只要||前面为false，无论||后面是true还是false，都将反回||后面的值。</p><p>解释2：只要||前面为true，无论||后面是true还是false，都将反回||前面的值。</p></li></ol><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="built_in">console</span>.log(flag&amp;&amp;<span class="number">1</span>);<span class="comment">// 前面的值为true（存在）则返回后面的值 或者执行函数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="built_in">console</span>.log(flag||<span class="number">1</span>);<span class="comment">// 前面的值为false（不存在）则返回后面的值 或者执行函数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进阶用法</span></span><br><span class="line"><span class="keyword">let</span> a =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">  b=<span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  b=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line">b = a&gt;<span class="number">10</span>&amp;&amp;<span class="number">10</span>||<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="说下逻辑运算符"><a href="#说下逻辑运算符" class="headerlink" title="说下逻辑运算符 !!"></a>说下逻辑运算符 !!</h2><blockquote><p>首先在复习下 js 中布尔值为false的六种情况<br>1、undefined（未定义，找不到值时出现）<br>2、null（代表空值）<br>3、false（布尔值的false，字符串”false”布尔值为true）<br>4、0（数字0，字符串”0”布尔值为true）<br>5、NaN（无法计算结果时出现，表示”非数值”；但是typeof NaN===“number”）<br>6、“”（双引号）或’’（单引号） （空字符串，中间有空格时也是true）<br>注意空数组空对象，负值转的布尔值时都为true</p></blockquote><h5 id="“-“操作符是判断变量是否真正为真（非null-undefined-false？0-NaN-””、’’等）的很简明的实现方式，省去了大量的-amp-amp-运算，如果用-amp-amp-来实现求真逻辑，代码表现如下："><a href="#“-“操作符是判断变量是否真正为真（非null-undefined-false？0-NaN-””、’’等）的很简明的实现方式，省去了大量的-amp-amp-运算，如果用-amp-amp-来实现求真逻辑，代码表现如下：" class="headerlink" title="“!!“操作符是判断变量是否真正为真（非null/undefined/false？0/NaN/””、’’等）的很简明的实现方式，省去了大量的&amp;&amp;运算，如果用&amp;&amp;来实现求真逻辑，代码表现如下："></a>“!!“操作符是判断变量是否真正为真（非null/undefined/false？0/NaN/””、’’等）的很简明的实现方式，省去了大量的&amp;&amp;运算，如果用&amp;&amp;来实现求真逻辑，代码表现如下：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( obj!==<span class="literal">null</span> &amp;&amp;obj!==<span class="literal">undefined</span> &amp;&amp; obj!==<span class="literal">NaN</span> &amp;&amp; obj!==<span class="string">&quot;&quot;</span> &amp;&amp; obj!==<span class="literal">false</span> &amp;&amp; obj!==<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用!!</span></span><br><span class="line"><span class="keyword">if</span>(!!obj)&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES11-又新出了一个-操作符"><a href="#ES11-又新出了一个-操作符" class="headerlink" title="ES11 又新出了一个 ?? 操作符"></a>ES11 又新出了一个 ?? 操作符</h2><p>当左侧是 null 或者 undefined 时候，返回后面的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> || <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"><span class="literal">undefined</span> || <span class="number">1</span> <span class="comment">// </span></span><br></pre></td></tr></table></figure><p>有点像 || 运算符</p><h4 id="他们两个的区别是"><a href="#他们两个的区别是" class="headerlink" title="他们两个的区别是"></a>他们两个的区别是</h4><ol><li>使用 ?? 时，只有One为 null 或者 undefined 时才会返回 two;</li><li>使用 || 时，One会先转化为布尔值判断，为true时返回One , false 返回Two</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ??</span></span><br><span class="line"> <span class="literal">undefined</span> ?? <span class="number">2</span>    <span class="comment">// 2</span></span><br><span class="line"> <span class="literal">null</span> ?? <span class="number">2</span>        <span class="comment">// 2</span></span><br><span class="line"> <span class="number">0</span> ?? <span class="number">2</span>            <span class="comment">// 0</span></span><br><span class="line"> <span class="string">&quot;&quot;</span> ?? <span class="number">2</span>            <span class="comment">// &quot;&quot;</span></span><br><span class="line"> <span class="literal">true</span> ?? <span class="number">2</span>        <span class="comment">// true</span></span><br><span class="line"> <span class="literal">false</span> ?? <span class="number">2</span>        <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ||</span></span><br><span class="line"> <span class="literal">undefined</span> || <span class="number">2</span>    <span class="comment">// 2</span></span><br><span class="line"> <span class="literal">null</span> || <span class="number">2</span>        <span class="comment">// 2</span></span><br><span class="line"> <span class="number">0</span> || <span class="number">2</span>            <span class="comment">// 2</span></span><br><span class="line"> <span class="string">&quot;&quot;</span> || <span class="number">2</span>            <span class="comment">// 2</span></span><br><span class="line"> <span class="literal">true</span> || <span class="number">2</span>        <span class="comment">// true</span></span><br><span class="line"> <span class="literal">false</span> || <span class="number">2</span>        <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后续补充！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PgSql - PostGIS 在 PostgreSQL 中使用</title>
      <link href="2022/09/13/PostgreSQL/PostGIS%20%E5%9C%A8%20PostgreSQL%20%E4%B8%AD%E4%BD%BF%E7%94%A8/"/>
      <url>2022/09/13/PostgreSQL/PostGIS%20%E5%9C%A8%20PostgreSQL%20%E4%B8%AD%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>首先来介绍一下 PostGIS 是什么？<br>PostGIS 是 PostgreSQL 对象关系数据库的一个空间数据库扩展。它增加了对地理对象的支持，允许在SQL中运行位置查询。</p><p>官方介绍：</p><blockquote><p>PostGIS：Spatial and Geographic objects for PostgreSQL</p><p>PostGIS is a spatial database extender for PostgreSQL object-relational database. It adds support for geographic objects allowing location queries to be run in SQL.</p></blockquote><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> superhero.name</span><br><span class="line"><span class="keyword">FROM</span> city, superhero</span><br><span class="line"><span class="keyword">WHERE</span> ST_Contains(city.geom, superhero.geom)</span><br><span class="line"><span class="keyword">AND</span> city.name = <span class="string">&#x27;Gotham&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>In addition to basic location awareness, PostGIS offers many features rarely found in other competing spatial databases such as Oracle Locator/Spatial and SQL Server.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong><em>不同系统不同安装方式 不再此处展开讲</em></strong></p><hr><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>公司新项目需要在系统中整合gis图，之前没有接触过，特此开一篇文章来讲解学习，后续持续更新。</p></blockquote><hr><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><p>PostGIS 是一个可选扩展，在你想使用它之前必须在每个数据库中启用它，然后才能使用它。</p><p>通过 psql 或 PgAdmin 连接你的数据库，然后运行下面SQL</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Enable PostGIS (as of 3.0 contains just geometry/geography)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTENSION</span> postgis;</span><br><span class="line"><span class="comment">-- Enable Topology</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTENSION</span> postgis_topology;</span><br></pre></td></tr></table></figure><p><em>*</em> 注意：不要在 <code>postgres</code> 数据库中启用</p><hr><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>升级到最新版本</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EXTENSION</span> postgis <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EXTENSION</span> postgis_topology <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>或指定版本升级</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EXTENSION</span> postgis</span><br><span class="line"> <span class="keyword">UPDATE</span> <span class="keyword">TO</span> &quot;3.1.0&quot;;</span><br><span class="line"><span class="comment">-- Upgrade Topology</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">EXTENSION</span> postgis_topology</span><br><span class="line"> <span class="keyword">UPDATE</span> <span class="keyword">TO</span> &quot;3.1.0&quot;;</span><br></pre></td></tr></table></figure><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先，创建一个带有空间列的表</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  id <span class="type">SERIAL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  geom GEOMETRY(<span class="type">Point</span>, <span class="number">26910</span>),</span><br><span class="line">  <span class="type">name</span> <span class="type">VARCHAR</span>(<span class="number">128</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>解释 ：个人理解 安装完PostGis扩展后 pg库支持了 <code>GEOMETRY</code> 类型  特殊类型。</p><hr><p>然后添加空间索引</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> mytable_gix</span><br><span class="line"><span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">USING</span> GIST (geom);</span><br></pre></td></tr></table></figure><hr><p>插入测试数据</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (geom) <span class="keyword">VALUES</span> (</span><br><span class="line">  ST_GeomFromText(<span class="string">&#x27;POINT(0 0)&#x27;</span>, <span class="number">26910</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>解释：通过<code>ST_GeomFromText</code>存储 特殊的几何数据/点位数据。</p><hr><p>查询附近的点</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, <span class="type">name</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> ST_DWithin(</span><br><span class="line">  geom,</span><br><span class="line">  ST_GeomFromText(<span class="string">&#x27;POINT(0 0)&#x27;</span>, <span class="number">26910</span>),</span><br><span class="line">  <span class="number">1000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大后端 - 如何分析开源项目（前后端分离）</title>
      <link href="2022/09/13/openSource/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>2022/09/13/openSource/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载源码"><a href="#一、下载源码" class="headerlink" title="一、下载源码"></a>一、下载源码</h3><p>​    后台：分析目录结构</p><p>tree</p><ul><li>eladmin-common 公共模块<ul><li>annotation 为系统自定义注解</li><li>aspect 自定义注解的切面</li><li>base 提供了Entity、DTO基类和mapstruct的通用mapper</li><li>config 自定义权限实现、redis配置、swagger配置、Rsa配置等</li><li>exception 项目统一异常的处理</li><li>utils 系统通用工具类</li></ul></li><li>eladmin-system 系统核心模块（系统启动入口）<ul><li>config 配置跨域与静态资源，与数据权限<ul><li>thread 线程池相关</li></ul></li><li>modules 系统相关模块(登录授权、系统监控、定时任务、运维管理等)</li></ul></li><li>eladmin-logging 系统日志模块</li><li>eladmin-tools 系统第三方工具模块</li><li>eladmin-generator 系统代码生成模块</li></ul><p><img src="/Users/aliang_1/Library/Application Support/typora-user-images/image-20221031183243040.png" alt="image-20221031183243040"></p><p><img src="/Users/aliang_1/Library/Application Support/typora-user-images/image-20221031183546647.png" alt="image-20221031183546647"></p><p>前端：分析目录结构</p><p><img src="/Users/aliang_1/Library/Application Support/typora-user-images/image-20221031183408157.png" alt="image-20221031183408157"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WX - 微信原生转化Uni-App</title>
      <link href="2021/01/28/wxMp-To-Uni/%E5%8E%9F%E7%94%9F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8C%96UniApp/"/>
      <url>2021/01/28/wxMp-To-Uni/%E5%8E%9F%E7%94%9F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8C%96UniApp/</url>
      
        <content type="html"><![CDATA[<h4 id="一、它是谁？"><a href="#一、它是谁？" class="headerlink" title="一、它是谁？"></a>一、它是谁？</h4><p>【miniprogram-to-uniapp】转换微信小程序”项目为uni-app项目。<br>原则上混淆过的项目，也可以进转换，因为关键字丢失，不一定会完美。</p><h4 id="二、它的原理是什么？"><a href="#二、它的原理是什么？" class="headerlink" title="二、它的原理是什么？"></a>二、它的原理是什么？</h4><p>最初是学了半节课堆和栈，觉得词法分析挺有意思的，再加入转换小程序插件时，发现这些繁琐的操作完全可以使用程序来完成。<br>核心是使用Babel获取AST（词法分析)，然后或使用Babel自带函数增删，或正则分析替换等等操作。<br>可能有的朋友觉得，这种为啥不是纯正则分析？ 纯正则可以解决一部分问题，对于标签与标签内容，其实正则是很难进行区分的哈。</p><h4 id="三、它能做哪些事情？"><a href="#三、它能做哪些事情？" class="headerlink" title="三、它能做哪些事情？"></a>三、它能做哪些事情？</h4><p>支持无云开发的小程序项目转换为uni-app项目<br>支持有云开发的小程序项目转换为uni-app项目(cloudfunctions目录将被忽略，uni-app结合小程序云开发见：使用uni-app进行微信小程序云开发经验分享)<br>支持解析TypeScript小程序项目<br>支持解析使用npm模块的小程序项目<br>支持解析include标签<br>支持解析template标签<br>支持解析Behavior文件为mixins文件<br>支持.js’, .wxml和*.wxss文件进行相应转换，并做了大量的优化<br>支持识别App、Page、Component、VantComponent、Behavior和纯Javascript文件的转换<br>使用jyf-parser替换wxParse(感谢网友 “爱瑞巴勒康忙北鼻” 的建议)<br>搜索未在data声明，而直接在setData()里使用的变量，并修复<br>合并使用require导入的wxs文件<br>因uni-app会将所有非static目录的资源文件删除，因此将所有资源文件移入static目录，并修复所有能修复到的路径<br>修复变量名与函数重名的情况(目前uni编译时会将非static目录的文件复制一份到static目录，但并不完全，因此本功能仍保留)<br>支持wxs文件转换，可以通过参数配置(-w)，默认为false(目前uni-app已支持wxs，不再推荐转换wxs)<br>支持vue-cli模式，可以通过参数配置(-c)，默认为false，即生成为vue-cli项目，转换完成需运行npm -i安装包，然后再导入hbuilder x里开发(建议爱折腾人士使用)<br>支持vant转换，可以通过参数配置(-z)，默认为false：自动识别（无须添加参数，工具已支持自动识别vant项目），如果需要转换使用vant-weapp组件的小程序项目，必须配置这个参数，否则转换后有问题。（另外，转换后的项目，目前仅支持v3和h5两个平台）<br>支持wx.xxx()转换为uni.xxx()，可以通过参数配置(-r)，默认为false（因uni已经对wx相关函数做了兼容，但仍有很多朋友有此需求，特作为可配置项，按需自取）</p><h4 id="四、它还有哪些不支持转换？"><a href="#四、它还有哪些不支持转换？" class="headerlink" title="四、它还有哪些不支持转换？"></a>四、它还有哪些不支持转换？</h4><p>不支持替换：wxaSortPicker<br>setData的变量是props里定义的<br>抽象节点：componentGenerics<br>语法错误(原始代码就有语法错误，请仔细检查，工具无法帮助你将所有代码都修复)<br>更多请参见miniprogram to uniapp 工具答疑</p><h4 id="五、怎么使用？"><a href="#五、怎么使用？" class="headerlink" title="五、怎么使用？"></a>五、怎么使用？</h4><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>在命令行里，运行【 npm install miniprogram-to-uniapp -g 】进行安装，因为这个包是工具，要求全局都能使用，所以需要-g进行全局安装。<br>如果运行npm报错，请先安装Node.js，下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1612410294/%E5%B0%8F%E7%A8%8B%E5%BA%8F/1_jvieea.png" alt=""></p><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>继续在命令行里，运行【 wtu -V 】，执行结果如下：</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1612410295/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2_imxt7p.png" alt=""></p><p>显示版本号，说明已经安装成功了。（wtu -&gt; 取自wx to uni之意，后面都用这个全局命令）</p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>在命令行里，输入【wtu -i “你的小程序项目路径”】<br>注意 -i 前面和后面都有空格！！！<br>注意 -i 前面和后面都有空格！！！<br>注意 -i 前面和后面都有空格！！！<br>如：【wtu -i “E:\zpWork\Project_self\miniprogram-to-uniapp\test\test-wx-to-uni”】 ，回车后即可以在源项目同及目录得到一个后缀为_uni的目录，即转换成功。</p><p>转换前：</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1612410297/%E5%B0%8F%E7%A8%8B%E5%BA%8F/3_rrzqx9.png" alt=""></p><p>转换后：</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1612410299/%E5%B0%8F%E7%A8%8B%E5%BA%8F/4_l1gfdc.png" alt=""></p><p>转换后的项目文件对比（左边是小程序项目，右边是Uni-app项目目录）：</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1612410300/%E5%B0%8F%E7%A8%8B%E5%BA%8F/5_bwa9fk.png" alt=""></p><h5 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h5><p>将转换后的xxx_uni项目导入到hbuilder X，<br>点击菜单 运行—&gt; 运行到小程序模拟器—&gt;微信开发者工具！（如果是使用了vant的项目，请运行到H5，vant项目转换后仅支持H5和app）<br>点击菜单 运行—&gt; 运行到小程序模拟器—&gt;微信开发者工具！（如果是使用了vant的项目，请运行到H5，vant项目转换后仅支持H5和app）<br>点击菜单 运行—&gt; 运行到小程序模拟器—&gt;微信开发者工具！（如果是使用了vant的项目，请运行到H5，vant项目转换后仅支持H5和app）<br>重要的话说三遍！<br>然后查看转换后的项目运行到小程序，是否可以正常运行无报错！<br>(因为这种转换非100%，所以至少需要保证 小程序—&gt;uniapp—&gt;小程序仍然能正常运行，再考虑运行到其他小程序或app)，<br>如有报错，请根据miniprogram to uniapp 工具答疑 进行修改，保证无报错，然后再运行到其他平台。</p><p>工具升级#<br>因为工具更新比较频繁，安装后，可以使用如下命令进行升级：<br>npm update miniprogram-to-uniapp -g</p><p>原文链接：<a href="https://ask.dcloud.net.cn/article/36037">https://ask.dcloud.net.cn/article/36037</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis - 批量操作总结</title>
      <link href="2021/01/22/Java/Mybatis%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/22/Java/Mybatis%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>记录自己在项目中总结的mybatis操作和用法</p><h3 id="mybatis-操作-批量插入-批量修改-批量删除-分页查询"><a href="#mybatis-操作-批量插入-批量修改-批量删除-分页查询" class="headerlink" title="mybatis 操作(批量插入,批量修改,批量删除,分页查询)"></a><code>mybatis</code> 操作(批量插入,批量修改,批量删除,分页查询)</h3><ul><li>环境描述 Java\Mysql\Mybatis</li></ul><ol><li>批量插入</li></ol><p>mapper 类方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertBatch</span><span class="params">(List&lt;ShoppingCartBean&gt; goodsList)</span></span>;</span><br></pre></td></tr></table></figure><br>XML 配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">   insert into th_shopping_Cart </span><br><span class="line">    (itemCode, userId, number)</span><br><span class="line">   values</span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    (#&#123;item.itemCode&#125;,#&#123;item.userId&#125;,#&#123;item.number&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>分页查询<br>页面请求参数</li></ol><ul><li>页面显示条数 size</li><li>第page页面</li></ul><p>返回结果</p><ul><li>所有记录条目总数:totalNum</li><li>当前page页</li><li>每页记录数pageSize</li><li>记录列表list<br>mapper类方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询第page页的所有记录</span></span><br><span class="line"><span class="function">List&lt;ShoppingCartBean&gt; <span class="title">selectByUserId</span><span class="params">(String userId, Integer start, Integer size)</span></span>;</span><br><span class="line"><span class="comment">// 查询所有记录数量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectCount</span><span class="params">(String userId)</span></span>;</span><br></pre></td></tr></table></figure><p>xml配置<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByUserId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">  select </span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">  from th_shopping_Cart</span><br><span class="line">  where userId =#&#123;0&#125;</span><br><span class="line">  // start = （page - 1）* size </span><br><span class="line">  order by createTime DESC limit #&#123;1&#125;,#&#123;2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">   SELECT COUNT(userId) AS _count </span><br><span class="line">   FROM `th_shopping_Cart`</span><br><span class="line">   WHERE userId=#&#123;0&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>mybatis 批量修改<br>url配置<br>在mysql数据库连接上增加 &amp;allowMultiQueries=true</li></ol><p>例如:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">jdbc:mysql://*******:3306/tohome?autoReconnect=true&amp;autoReconnectForPools=true&amp;interactiveClient=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure><br>mapper类方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//参数为List&lt;T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBatch</span><span class="params">(List&lt;ShoppingCartBean&gt; list)</span></span>;</span><br></pre></td></tr></table></figure><br>XML配置逻辑<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update th_shopping_Cart </span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            number=$&#123;item.number&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where userId=&#x27;$&#123;item.userId&#125;&#x27; and itemCode=&#x27;$&#123;item.itemCode&#125;&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>批量删除<br>XML配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.morning.star.tohome.store.entity.ShoppingItems&quot;</span>&gt;</span></span><br><span class="line">    delete from th_shopping_Cart</span><br><span class="line">    where userId =#&#123;userId&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;null!=list and list.size &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        and itemCode in</span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.itemCode&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="即使再小的帆也能远航（前提得一直坚持驶到彼岸！）-—Aliang"><a href="#即使再小的帆也能远航（前提得一直坚持驶到彼岸！）-—Aliang" class="headerlink" title="即使再小的帆也能远航（前提得一直坚持驶到彼岸！） —Aliang"></a>即使再小的帆也能远航（前提得一直坚持驶到彼岸！） —Aliang</h2></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis - 多表关联查询分页问题</title>
      <link href="2021/01/22/Java/Mybatis%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/22/Java/Mybatis%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前给公司做的管理系统，今天被测出来，前台展示的分页数量和实际数量不符合，导致前台分页有误！（这么大的BUG竟然没发现，我也是服了自己了）<br>本项目数据库使用MySql，插件有如下两个</p><p>MyBatis<br>MyBatisPlus 分页插件</p><p>分析<br>产生BUG的地方<br>下方是未修改之前的SQL，通过多表连接查询一对多的数据</p><h1 id="修改前的SQL"><a href="#修改前的SQL" class="headerlink" title="修改前的SQL"></a>修改前的SQL</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.<span class="operator">*</span>,</span><br><span class="line">r.role_id,</span><br><span class="line">r.role_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">sys_user <span class="keyword">AS</span> u</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys_user_role <span class="keyword">AS</span> ur <span class="keyword">ON</span> u.user_id <span class="operator">=</span> ur.user_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys_role <span class="keyword">AS</span> r <span class="keyword">ON</span> ur.role_id <span class="operator">=</span> r.role_id </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">u.user_id</span><br></pre></td></tr></table></figure><p>该SQL查询出的信息如下图</p><p>可以看出，这里查询出了7条数据。对于同一个主表，如果在子表中拥有多个关联时，就会查询出多条。<br>然后，使用查询出的结果，在后台使用 <code>MyBatils</code> 的 <code>collection</code> 进行一对多的处理。代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xxx.modules.sys.entity.SysUserEntity&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sysDetailUserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loginName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;login_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mobile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sts&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sts&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regOrgId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;reg_org_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regOrgName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;org_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regTenantId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;reg_tenant_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regTenantName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tenant_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.xxx.modules.sys.entity.SysRoleEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>  <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span> /&gt;</span></span><br><span class="line">    &lt;/collection &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><br>经过这样，然后将查询的结果发送到前端，最终获取到的JSON结构如下所示<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;totalCount&quot;</span>:<span class="number">7</span>, <span class="comment">// 这里总数为SQL中查询的数据</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;totalPage&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;currPage&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>:[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;] <span class="comment">// 查询出的数据又是经过mybatis处理后的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里就可以看出，导致前台分页总数和实际展示的数量不一致的问题，就是分页总数与MyBatis数据不一致造成的。<br>似乎在MyBatis处理前，分页插件先查询了count，共查询7条纪录，之后再由MyBatis进行处理，然后处理完毕就剩5条纪录。</p><p>产生BUG的原因<br>既然产生了BUG，那就要理解其产生的原因。既然是分页插件和MyBaits的问题，那么就从这两个地方入手。<br>我所使用的是MyBatisPlus的分页插件，先了解一下它的分页实现原理吧。通过跟踪分析代码，观察它的实现方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SQL拦截的地方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        StatementHandler statementHandler = (StatementHandler)PluginUtils.realTarget(invocation.getTarget());</span><br><span class="line">        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);</span><br><span class="line">    <span class="comment">// 解析SQL</span></span><br><span class="line">        <span class="keyword">this</span>.sqlParser(metaObject);</span><br><span class="line">        MappedStatement mappedStatement = (MappedStatement)metaObject.getValue(<span class="string">&quot;delegate.mappedStatement&quot;</span>);</span><br><span class="line">    <span class="comment">// 验证是否为SELECT操作，并且不为存储过程</span></span><br><span class="line">        <span class="keyword">if</span> (SqlCommandType.SELECT == mappedStatement.getSqlCommandType() &amp;&amp; StatementType.CALLABLE != mappedStatement.getStatementType()) &#123;</span><br><span class="line">            BoundSql boundSql = (BoundSql)metaObject.getValue(<span class="string">&quot;delegate.boundSql&quot;</span>);</span><br><span class="line">            Object paramObj = boundSql.getParameterObject();</span><br><span class="line">            IPage&lt;?&gt; page = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 验证参数值是否为page对象，如果参数值为Map，则从Map中读取page对象</span></span><br><span class="line">            <span class="keyword">if</span> (paramObj <span class="keyword">instanceof</span> IPage) &#123;</span><br><span class="line">                page = (IPage)paramObj;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramObj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">                Iterator var8 = ((Map)paramObj).values().iterator();</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                    Object arg = var8.next();</span><br><span class="line">                    <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> IPage) &#123;</span><br><span class="line">                        page = (IPage)arg;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 当page不存在或者size小于0的情况下，不进行分页</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != page &amp;&amp; page.getSize() &gt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.limit &gt; <span class="number">0L</span> &amp;&amp; <span class="keyword">this</span>.limit &lt;= page.getSize()) &#123;</span><br><span class="line">                    page.setSize(<span class="keyword">this</span>.limit);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                String originalSql = boundSql.getSql();</span><br><span class="line">                Connection connection = (Connection)invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line">                DbType dbType = StringUtils.isNotEmpty(<span class="keyword">this</span>.dialectType) ? DbType.getDbType(<span class="keyword">this</span>.dialectType) : JdbcUtils.getDbType(connection.getMetaData().getURL());</span><br><span class="line">                <span class="keyword">if</span> (page.isSearchCount()) &#123;</span><br><span class="line">                    SqlInfo sqlInfo = SqlParserUtils.getOptimizeCountSql(page.optimizeCountSql(), <span class="keyword">this</span>.countSqlParser, originalSql);</span><br><span class="line">                    <span class="comment">// 使用sql查询结果总数</span></span><br><span class="line">                    <span class="keyword">this</span>.queryTotal(<span class="keyword">this</span>.overflow, sqlInfo.getSql(), mappedStatement, boundSql, page, connection);</span><br><span class="line">                    <span class="keyword">if</span> (page.getTotal() &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 将原始SQL和page拼接起来</span></span><br><span class="line">                String buildSql = concatOrderBy(originalSql, page);</span><br><span class="line">                DialectModel model = DialectFactory.buildPaginationSql(page, buildSql, dbType, <span class="keyword">this</span>.dialectClazz);</span><br><span class="line">                Configuration configuration = mappedStatement.getConfiguration();</span><br><span class="line">                List&lt;ParameterMapping&gt; mappings = <span class="keyword">new</span> ArrayList(boundSql.getParameterMappings());</span><br><span class="line">                Map&lt;String, Object&gt; additionalParameters = (Map)metaObject.getValue(<span class="string">&quot;delegate.boundSql.additionalParameters&quot;</span>);</span><br><span class="line">                model.consumers(mappings, configuration, additionalParameters);</span><br><span class="line">                metaObject.setValue(<span class="string">&quot;delegate.boundSql.sql&quot;</span>, model.getDialectSql());</span><br><span class="line">                metaObject.setValue(<span class="string">&quot;delegate.boundSql.parameterMappings&quot;</span>, mappings);</span><br><span class="line">                <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>由源码可知，分页插件在执行的时候，会先去查询所属SQL的总数，然后使用查到的总数进行分页，再与原始SQL拼接。<br>因此显而易见，问题出现在这里。</p><p>如何解决BUG<br>BUG的解决办法有很多，我采用的是<strong>先查询出主表中的数据总数，在执行collection时，再去使用子查询去查询一对多的关系。</strong>此方法可能不适用与多对多查询</p><p>解决问题<br>修改SQL<br>在mybatis中，修改查询SQL，使第一次查询只查询主表（不要查询一对多的关系）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改查询SQL，改为只查询主表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserPageList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;sysBaseUserMap&quot;</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">    u.*</span><br><span class="line">  FROM</span><br><span class="line">    sys_user AS u</span><br><span class="line">  ORDER BY</span><br><span class="line">    u.user_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 额外增加一个查询关联表的sql，其中user_id为子查询需要的条件，在collection中传入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserRole&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xxx.modules.sys.entity.SysRoleEntity&quot;</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">    r.*</span><br><span class="line">FROM</span><br><span class="line">    sys_role as r</span><br><span class="line">LEFT JOIN</span><br><span class="line">    sys_user_role as ur</span><br><span class="line">ON</span><br><span class="line">    r.role_id = ur.role_id</span><br><span class="line">WHERE</span><br><span class="line">    ur.user_id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>修改collection<br>由于用到了子查询，因此需要修改原先的一对多处理方式，将其改为调用子查询<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xxx.modules.sys.entity.SysUserEntity&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sysDetailUserMap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loginName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;login_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mobile&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sts&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sts&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regOrgId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;reg_org_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regOrgName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;org_name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regTenantId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;reg_tenant_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;regTenantName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tenant_name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column指向一个主表和子表的共有字段 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.xxx.modules.sys.entity.SysRoleEntity&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getUserRole&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>  <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span> /&gt;</span></span><br><span class="line">&lt;/collection &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><br>查询结果<br>经过如上修改后，再次查询结果如下所示<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;totalCount&quot;</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;totalPage&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;currPage&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>:[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>总结<br>这种方式可以解决一对多的问题。但针对于多对多问题还没有考虑过。做个记录</p><p>Q.E.D. </p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux - Linux命令行 光标移动技巧等</title>
      <link href="2021/01/22/Linux/keymap/"/>
      <url>2021/01/22/Linux/keymap/</url>
      
        <content type="html"><![CDATA[<p>看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。<br>在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。<br>但是事情也不是那么简单，还是需要知道“如何去做”。</p><h4 id="Ctrl组合"><a href="#Ctrl组合" class="headerlink" title="Ctrl组合"></a>Ctrl组合</h4><p>在单词之间跳转，使用Ctrl+左右键。<br>Ctrl+a跳到本行的行首<br>Ctrl+e则跳到页尾<br>Ctrl+u删除当前光标前面的文字<br>ctrl+k-删除当前光标后面的文字<br>Ctrl+w和Alt+d - 对于当前的单词进行删除操作，w删除光标前面的单词的字符，d则删除后面的字符<br>ctrl+a:光标移到行首<br>ctrl+b:光标左移一个字母<br>ctrl+c:杀死当前进程<br>ctrl+d:退出当前 Shell<br>ctrl+e:光标移到行尾<br>ctrl+h:删除光标前一个字符，同 backspace 键相同<br>ctrl+k:清除光标后至行尾的内容<br>ctrl+l:清屏，相当于clear<br>ctrl+r:搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history<br>ctrl+u: 清除光标前至行首间的所有内容<br>ctrl+w: 移除光标前的一个单词<br>ctrl+t: 交换光标位置前的两个字符<br>ctrl+y: 粘贴或者恢复上次的删除<br>ctrl+d: 删除光标所在字母;注意和backspace以及ctrl+h的区别，这2个是删除光标前的字符<br>ctrl+f: 光标右移<br>ctrl+z : 把当前进程转到后台运行，使用’ fg ‘命令恢复。比如top -d1 然后ctrl+z ，到后台，然后fg,重新恢复</p><h4 id="Alt组合"><a href="#Alt组合" class="headerlink" title="Alt组合"></a>Alt组合</h4><p>Alt+Backsapce - 删除当前光标后面的单词，如果删除错误，使用Ctrl+y进行恢复Ctrl+L进行清屏操作</p><h4 id="ESC组合"><a href="#ESC组合" class="headerlink" title="ESC组合"></a>ESC组合</h4><p>esc+d: 删除光标后的一个词<br>esc+f: 往右跳一个词<br>esc+b: 往左跳一个词<br>esc+t: 交换光标位置前的两个单词。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIO - MinIO上传文件错误解决办法（Linux）</title>
      <link href="2021/01/22/Linux/minioErr/"/>
      <url>2021/01/22/Linux/minioErr/</url>
      
        <content type="html"><![CDATA[<h1 id="minio上传下载文件失败："><a href="#minio上传下载文件失败：" class="headerlink" title="minio上传下载文件失败："></a>minio上传下载文件失败：</h1><p>错误消息：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The difference between the request time and the server<span class="symbol">&#x27;s</span> time is too large.</span><br></pre></td></tr></table></figure><p>原因：linux服务器时区的问题。</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>一、查看系统时间、硬件时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="meta"># date <span class="comment">// 查看系统时间</span></span></span><br><span class="line"><span class="number">2.</span><span class="meta"># hwclock <span class="comment">// 查看硬件时间</span></span></span><br></pre></td></tr></table></figure><p>二、时间服务器上的时间同步的方法<br> 安装ntpdate工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="comment"># yum -y install ntp ntpdate</span></span><br></pre></td></tr></table></figure><p>设置系统时间与网络时间同步</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.# ntpdate cn<span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br></pre></td></tr></table></figure><p>将系统时间写入硬件时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.<span class="comment"># hwclock --systohc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java - 微服务代码生成</title>
      <link href="2021/01/22/Java/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>2021/01/22/Java/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>大部分项目里其实有很多代码都是重复的，几乎每个基础模块的代码都有增删改查的功能，而这些功能都是大同小异， 如果这些功能都要自己去写，将会大大浪费我们的精力降低效率。所以这种重复性的代码可以使用代码生成。</p><p>提示<br>关于代码生成使用流程</p><p>1、修改代码生成配置<br>单应用编辑resources目录下的application.yml<br>多模块编辑ruoyi-generator中的resources目录下的generator.yml<br>author: # 开发者姓名，生成到类注释上<br>packageName: # 默认生成包路径<br>autoRemovePre: # 是否自动去除表前缀<br>tablePrefix: # 表前缀</p><p>2、新建数据库表结构（单表）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sys_student;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sys_student (</span><br><span class="line">  student_id           <span class="type">int</span>(<span class="number">11</span>)         auto_increment    comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  student_name         <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>        comment <span class="string">&#x27;学生名称&#x27;</span>,</span><br><span class="line">  student_age          <span class="type">int</span>(<span class="number">3</span>)          <span class="keyword">default</span> <span class="keyword">null</span>      comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  student_hobby        <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>        comment <span class="string">&#x27;爱好（0代码 1音乐 2电影）&#x27;</span>,</span><br><span class="line">  student_sex          <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>       comment <span class="string">&#x27;性别（0男 1女 2未知）&#x27;</span>,</span><br><span class="line">  student_status       <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>       comment <span class="string">&#x27;状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  student_birthday     datetime                          comment <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (student_id)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1</span> comment <span class="operator">=</span> <span class="string">&#x27;学生信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><br>2、新建数据库表结构（树表）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sys_product;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sys_product (</span><br><span class="line">  product_id        <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment    comment <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">  parent_id         <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">default</span> <span class="number">0</span>                  comment <span class="string">&#x27;父产品id&#x27;</span>,</span><br><span class="line">  product_name      <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;产品名称&#x27;</span>,</span><br><span class="line">  order_num         <span class="type">int</span>(<span class="number">4</span>)          <span class="keyword">default</span> <span class="number">0</span>                  comment <span class="string">&#x27;显示顺序&#x27;</span>,</span><br><span class="line">  status            <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>                comment <span class="string">&#x27;产品状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (product_id)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1</span> comment <span class="operator">=</span> <span class="string">&#x27;产品表&#x27;</span>;</span><br></pre></td></tr></table></figure><br>2、新建数据库表结构（主子表）</p><hr><p>— 客户表</p><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sys_customer;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sys_customer (</span><br><span class="line">  customer_id           <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment    comment <span class="string">&#x27;客户id&#x27;</span>,</span><br><span class="line">  customer_name         <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;客户姓名&#x27;</span>,</span><br><span class="line">  phonenumber           <span class="type">varchar</span>(<span class="number">11</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;手机号码&#x27;</span>,</span><br><span class="line">  sex                   <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;客户性别&#x27;</span>,</span><br><span class="line">  birthday              datetime                                   comment <span class="string">&#x27;客户生日&#x27;</span>,</span><br><span class="line">  remark                <span class="type">varchar</span>(<span class="number">500</span>)    <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;客户描述&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (customer_id)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1</span> comment <span class="operator">=</span> <span class="string">&#x27;客户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- 商品表</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sys_goods;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sys_goods (</span><br><span class="line">  goods_id           <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment    comment <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  customer_id        <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span>                   comment <span class="string">&#x27;客户id&#x27;</span>,</span><br><span class="line">  name               <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  weight             <span class="type">int</span>(<span class="number">5</span>)          <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;商品重量&#x27;</span>,</span><br><span class="line">  price              <span class="type">decimal</span>(<span class="number">6</span>,<span class="number">2</span>)    <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">  <span class="type">date</span>               datetime                                   comment <span class="string">&#x27;商品时间&#x27;</span>,</span><br><span class="line">  type               <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;商品种类&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (goods_id)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">1</span> comment <span class="operator">=</span> <span class="string">&#x27;商品表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>3、登录系统（系统工具 -&gt; 代码生成 -&gt; 导入对应表）</p><p>4、代码生成列表中找到需要表（可预览、修改、删除生成配置）</p><p>5、点击生成代码会得到一个ruoyi.zip执行sql文件，按照包内目录结构复制到自己的项目中即可</p><p>多模块所有代码生成的相关业务逻辑代码在ruoyi-generator模块，可以自行调整或剔除</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java - 一个接口多个实现时</title>
      <link href="2021/01/22/Java/%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%A4%9A%E4%B8%AA%E5%AE%9E%E7%8E%B0%E6%97%B6/"/>
      <url>2021/01/22/Java/%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%A4%9A%E4%B8%AA%E5%AE%9E%E7%8E%B0%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、（Spring）项目-一个接口多个实现，指定实现类"><a href="#一、（Spring）项目-一个接口多个实现，指定实现类" class="headerlink" title="一、（Spring）项目 一个接口多个实现，指定实现类"></a>一、（Spring）项目 一个接口多个实现，指定实现类</h2><p>目的：一个接口多个实现时，根据不同的条件调用不用的实现</p><p>1、有如下接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pay</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、有如下两个实现</p><p>实现一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;weixinPay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinPay</span> <span class="keyword">implements</span> <span class="title">Pay</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pay</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;weixinpay&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;aliPay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">Pay</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pay</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alipay&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、根据不同的条件调用不同的实现</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;weixinPay&quot;)</span></span><br><span class="line">ShopPay weixinPay;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(name=&quot;aliPay&quot;)</span></span><br><span class="line">ShopPay aliPay;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;weixinPay&quot;)</span></span><br><span class="line">ShopPay weixinPay;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;aliPay&quot;)</span></span><br><span class="line">ShopPay aliPay;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git - Git个人学习记录手册</title>
      <link href="2021/01/21/Git/gitlearn/"/>
      <url>2021/01/21/Git/gitlearn/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本篇教程是自己学习Git记录的<br>本篇教程不会介绍Git背景以及一些专业知识，毕竟本人时间有限哈哈哈！<br>如果喜欢教程就评论下或者把站点添加到你宝贵的收藏夹里面吧</p></div><h3 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h3><p>​    本人是MacOS系统这里只是演示一下，如Linux 、windows 请自行查阅资料 我这里就不展开了哈。</p><h5 id="通过homebrew安装Git"><a href="#通过homebrew安装Git" class="headerlink" title="通过homebrew安装Git"></a>通过homebrew安装Git</h5><ul><li>未安装homebrew，需安装homebrew<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li><li>安装git<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li>安装完成后还需要进一步设置，打开你的终端输入：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</li></ul><p>注意git config命令的—global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h3 id="二、认识Git"><a href="#二、认识Git" class="headerlink" title="二、认识Git"></a>二、认识Git</h3><p>在学习Git需要清楚的几个术语<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1611215358/Git/683090701_88630_cxjbn1.png" alt=""></p><p><strong>Workspace</strong>：工作区<br><strong>Index/Stage</strong>：暂存区，也叫索引<br><strong>Repository</strong>：仓库区（或本地仓库），也存储库<br><strong>Remote</strong>：远程仓库</p><p><strong>1. 有关几个名词解释</strong></p><p><strong>工作区</strong>: 通过<code>git init</code>创建的代码库的所有文件但是不包括<code>.git</code>文件(版本库)<br><strong>暂存区</strong>: 通过<code>git add ./*/*Xxx/Xxxx*</code> 添加的修改,都是进入到暂存区了,肉眼不可见 通过 <code>git status</code> 可以看到修改的状态。</p><p><strong>2. 什么是修改？</strong><br>比如你新增了一行，这就是一个修改，<br>删除了一行，也是一个修改，<br>更改了某些字符，也是一个修改，<br>删了一些又加了一些，也是一个修改，<br>甚至创建一个新文件，也算一个修改。</p><h3 id="三、创建版本库"><a href="#三、创建版本库" class="headerlink" title="三、创建版本库"></a>三、创建版本库</h3><p>什么是版本库呢，以我的初中学历水平可以这样解释，可以理解版本库就是一个文件夹，这里面的文件等都会被git管理，谁也跑不掉除非你给某个文件手动排除在外这样git就不会管它了。<br>所以创建个版本库是不是特别简单了呢，看下面。（建个文件夹不久好了）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir learngit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> learngit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/Users/aliang/learngit</span><br></pre></td></tr></table></figure><br><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/aliang/learngit</code>。<br>好了文件夹建立好了，接下来吧文件夹交给git吧，我们需要通过这个命令<code>git init</code>来初始化git版本库。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/aliang/learngit/.git/</span><br></pre></td></tr></table></figure><br>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><h5 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h5><p>言归正传，现在我们编写一个<code>readme.txt</code>文件，内容如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//创建第一个文件---这是文件内容---</span><br></pre></td></tr></table></figure><br>一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br></pre></td></tr></table></figure><br>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;new aliang readme file&quot;</span></span></span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><br>这样文件就添加进本地仓库了。<br>这小节一共学习了三个命令哦<br>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ul><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件。</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ul><h3 id="四、时光机器"><a href="#四、时光机器" class="headerlink" title="四、时光机器"></a>四、时光机器</h3><p>上一小节已经吧文件添加到本地仓库了，现在我们休息回来又要继续干活了，我们继续修改readme.txt 文件 随便改点。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建第一个文件---这是文件内容---</span><br><span class="line">//这里是你编写到代码嘿嘿嘿</span><br></pre></td></tr></table></figure><br>现在我们查看下改动结果使用<code>git status</code>命令来查看。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><br>如果想看文件都修改了什么内容怎么办，小问题git给我们提供了一个<code>git diff</code> 命令<br><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式,我这里就不演示了，有时候我看diff也懵逼。。。</p><p>接下来就是提交修改到本地仓库喽，还记得哈。<br>第一步是<code>git add</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt</span></span><br></pre></td></tr></table></figure><br>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><br>git status告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;add code&quot;</span></span></span><br><span class="line">[master e475afc] add code</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><br>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><br>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><h3 id="五、版本回退"><a href="#五、版本回退" class="headerlink" title="五、版本回退"></a>五、版本回退</h3><p>  ·今天先更新到这里，干活去喽 持续更新！！！·</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Gitlab-runner</title>
      <link href="2021/01/21/Git/gitlabCICD/"/>
      <url>2021/01/21/Git/gitlabCICD/</url>
      
        <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><h1 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/gitlab-runner/config</span><br></pre></td></tr></table></figure><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always -v /opt/gitlab-runner/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><p>进入runner容器，注册到gitlab上</p><p>汇总操作命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner  gitlab-runner register -n \</span><br><span class="line">  --url http://192.168.0.253:8090 \</span><br><span class="line">  --registration-token tyXBwC8frbShS4yn3nE5 \ # token需要根据实际情况进行修改</span><br><span class="line">  --tag-list=dockersock,docker \</span><br><span class="line">  --description &quot;dockersock&quot; \</span><br><span class="line">  --docker-privileged=true \</span><br><span class="line">  --docker-pull-policy=&quot;if-not-present&quot; \</span><br><span class="line">  --docker-image &quot;docker:latest&quot; \</span><br><span class="line">  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --docker-volumes /root/m2:/root/.m2 \</span><br><span class="line">  --executor docker </span><br></pre></td></tr></table></figure><br>分步操作命令：</p><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner /bin/bash</span><br></pre></td></tr></table></figure><h1 id="运行以下注册命令"><a href="#运行以下注册命令" class="headerlink" title="运行以下注册命令"></a>运行以下注册命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure><h1 id="输入Gitlab实例的地址"><a href="#输入Gitlab实例的地址" class="headerlink" title="输入Gitlab实例的地址"></a>输入Gitlab实例的地址</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">http://192.168.0.253:8090  # 端口采用默认的80，否则需要加上端口，比如 http://192.168.0.253:8090</span><br></pre></td></tr></table></figure><h1 id="输入token"><a href="#输入token" class="headerlink" title="输入token"></a>输入token</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">tyXBwC8frbShS4yn3nE5</span><br><span class="line">如何获取token</span><br><span class="line">进入到项目中的设置，找到CI/CD，Runner ，图片这个token仅供途径展示</span><br></pre></td></tr></table></figure><h1 id="输入Runner的描述，后期可以手动修改"><a href="#输入Runner的描述，后期可以手动修改" class="headerlink" title="输入Runner的描述，后期可以手动修改"></a>输入Runner的描述，后期可以手动修改</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">[hostname] my-runner</span><br></pre></td></tr></table></figure><h1 id="输入与Runner关联的标签，后期可以手动修改"><a href="#输入与Runner关联的标签，后期可以手动修改" class="headerlink" title="输入与Runner关联的标签，后期可以手动修改"></a>输入与Runner关联的标签，后期可以手动修改</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">my-tag</span><br></pre></td></tr></table></figure><h1 id="输入Ruuner的执行者"><a href="#输入Ruuner的执行者" class="headerlink" title="输入Ruuner的执行者"></a>输入Ruuner的执行者</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">docker</span><br></pre></td></tr></table></figure><h1 id="如果上面执行者为docker，需要你在后续项目根部的-gitlab-ci-yml中指定docker版本"><a href="#如果上面执行者为docker，需要你在后续项目根部的-gitlab-ci-yml中指定docker版本" class="headerlink" title="如果上面执行者为docker，需要你在后续项目根部的.gitlab-ci.yml中指定docker版本"></a>如果上面执行者为docker，需要你在后续项目根部的.gitlab-ci.yml中指定docker版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">alpine:latest</span><br><span class="line">通过以上命令后，就可以在gitlab中查看到了这个刚刚创建的runner</span><br></pre></td></tr></table></figure><p>runner注册完毕之后，还需要修改一下runner的配置文件，实现runner与宿主机的数据挂载:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/gitlab-runner/config/config.toml # 开头创建的宿主机挂载目录</span><br><span class="line"></span><br><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[session_server]</span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;my-runner&quot;</span><br><span class="line">  url = &quot;http://192.168.0.253:8090&quot;</span><br><span class="line">  token = &quot;tyXBwC8frbShS4yn3nE5&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.custom_build_dir]</span><br><span class="line">  [runners.cache]</span><br><span class="line">    [runners.cache.s3]</span><br><span class="line">    [runners.cache.gcs]</span><br><span class="line">    [runners.cache.azure]</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;alpine:latest&quot;</span><br><span class="line">    privileged = false</span><br><span class="line">    disable_entrypoint_overwrite = false</span><br><span class="line">    oom_kill_disable = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;,&quot;/var/run/docker.sock:/var/run/docker.sock&quot;]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></table></figure><br>原先是volumes = [“/cache”]<br>上面的volumes数组中添加docker的挂载，加快项目的构建速度。</p><p>最后，只需要再重启runner容器即可:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart gitlab-runner</span><br></pre></td></tr></table></figure><br>说明：<br>1.不同的项目可以使用不同的gitlab-runner，根据实际情况再运行一个名称不一样的容器，并根据新项目的token注册就行了。<br>2.不同的项目还可以使用同一个gitlab-runner，只需要在注册的时候使用不同项目下的token就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成长 - 成长</title>
      <link href="2021/01/15/GrowingUp/%E6%88%90%E9%95%BF/"/>
      <url>2021/01/15/GrowingUp/%E6%88%90%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<!-- ”感情开始时本就是你骗他、他骗你、自己骗自己的游戏。当局者是很难自我分化，无法判断自己喜欢他时他是否也喜欢自己，会不自觉给自己加戏。没恋爱经验的人很难识别对方是否喜欢自己，更别说看到真实的对方了。　　沉没成本不可追，就别再追加机会成本了。用于怀念过去的时间，你失去做其他更有意义之事的机会，这就是机会成本。　　另外，你们是否相互承认恋人关系。别看“男朋友”“女朋友”这种小小的称谓，有不少人当初在一起时都没认同过这种身份，更别说公开关系。这么久过去了，你还在怀念一个都无法称为“前任”的人？你这是在干嘛？？说出去不怕被人笑掉大牙？？？ -->]]></content>
      
      
      
        <tags>
            
            <tag> Aliang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 - Promise 基础教程使用</title>
      <link href="2021/01/15/JsLearn/Promise/"/>
      <url>2021/01/15/JsLearn/Promise/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天记录一篇ES6新知识 Promise<br>初次接触Promise 你可能会很懵逼 ，这TM是个什么玩意 ！康康过了官方文档之后也是一头雾水！！</p></blockquote><h5 id="话不多说，直接上干货"><a href="#话不多说，直接上干货" class="headerlink" title="话不多说，直接上干货"></a>话不多说，直接上干货</h5><ul><li>Promise到底是来做啥的呢？<ul><li>Promise 是异步编程的一种解决方案。</li></ul></li><li>那什么时候我们会来处理异步事件呢？<ul><li>一种很常见的场景应该就是网络请求了。</li><li>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像3+7=10一样返回结果。</li><li>所以往往我们会传入另一个函数，在数据请求成功时候，将数据通过这个函数回调出去 ，这就是我们经常扯皮的回调函数。</li><li>如果只是一个简单的网络请求，那么这种方案还是可以的，比较可以接受。</li></ul></li><li><p>但是，当网络请求非常复杂的时候，就会出现回调地狱。</p><ul><li>Ok，接下来看】康康地狱吧</li></ul></li><li><p>我们来考虑下面的场景(有夸张的成分)：</p><ul><li>我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2</li><li>我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3</li><li>我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4</li><li>发送网络请求url4，获取最终的数据data4</li></ul></li></ul><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610696951/%E5%9B%BE%E7%89%871_pbphlg.png" alt="回调地狱"></p><ul><li>上面的代码有什么问题吗？<ul><li>正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。</li><li>但是，这样额代码难看而且不容易维护。</li><li>我们更加期望的是一种更加优雅的方式来进行这种异步操作。</li></ul></li><li><p>如何做呢？就是使用Promise。</p><ul><li>Promise可以以一种非常优雅的方式来解决这个问题。</li></ul></li><li><p>我们先来看看Promise最基本的语法。</p><ul><li>这里，我们用一个定时器来模拟异步事件： <img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610697335/%E5%9B%BE%E7%89%872_tsnnrr.png" alt=""></li><li>假设下面的data是从网络上1秒后请求的数据,console.log就是我们的处理方式,这是我们过去的处理方式.</li></ul></li><li>我们将它换成Promise代码.<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610697335/%E5%9B%BE%E7%89%873_zr0owz.png" alt=""><ul><li>这个例子会让我们感觉脱裤放屁，多此一举</li><li>首先，下面的Promise代码明显比上面的代码看起来还要复杂。</li><li>其次，下面的Promise代码中包含的resolve、reject、then、catch都是些什么东西？</li><li>我们先不管第一个复杂度的问题，因为这样的一个屁大点的程序根本看不出来Promise真正的作用。</li></ul></li><li>我们先来认认真真的读一读这个程序到底做了什么？<ul><li>new Promise很明显是创建一个Promise对象</li><li>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。<ul><li>但是resolve, reject它们是什么呢？</li><li>我们先知道一个事实：在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）</li><li>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。</li></ul></li><li>成功还是失败？<ul><li>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。</li><li>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调。 </li></ul></li></ul></li><li><p>OK，这就是Promise最基本的使用了。</p></li><li><p>首先, 当我们开发中有异步操作时, 就可以给异步操作包装一个Promise </p><ul><li>异步操作之后会有三种状态<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610698583/%E5%9B%BE%E7%89%874_lmdg1f.png" alt=""></li></ul></li><li><p>我们一起来看一下这三种状态:</p><ul><li>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</li><li>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</li><li>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610698583/%E5%9B%BE%E7%89%875_zcsfho.png" alt=""></li></ul></li><li><p>我们在看Promise的流程图时，发现无论是then还是catch都可以返回一个Promise对象。</p></li><li>所以，我们的代码其实是可以进行链式调用的：</li><li><p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了</p><ul><li>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数</li><li>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610699988/JS/Promise/%E5%9B%BE%E7%89%876_zmu0xz.png" alt=""></li></ul></li><li><p>简化版代码：</p><ul><li>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据</li><li>注意下面的代码中，我讲return Promise.resovle(data)改成了return data</li><li>结果依然是一样的<br><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1610700068/JS/Promise/%E5%9B%BE%E7%89%877_fng3lp.png" alt=""></li></ul><h5 id="Promise-基础使用到此就结束了-，后续跟新Promise封装Axios-！"><a href="#Promise-基础使用到此就结束了-，后续跟新Promise封装Axios-！" class="headerlink" title="Promise 基础使用到此就结束了 ，后续跟新Promise封装Axios ！"></a>Promise 基础使用到此就结束了 ，后续跟新Promise封装Axios ！</h5></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Copilot 的使用方法和快捷键</title>
      <link href="2021/01/15/Vscode/Github-copilots/"/>
      <url>2021/01/15/Vscode/Github-copilots/</url>
      
        <content type="html"><![CDATA[<h2 id="Copilot-是什么"><a href="#Copilot-是什么" class="headerlink" title="Copilot 是什么"></a>Copilot 是什么</h2><p>Copilot (<a href="https://copilot.github.com/">https://copilot.github.com/</a>) 是由 Github 提供的AI编码辅助工具，它可以在编码过程中提供基于 AI 学习的编码建议。在很多情况下，只需要有注释或者函数名称，Copilot就可以实例完整的代码。</p><p>目前 Copilot 还没有全量开放，需要申请开通权限。访问它的官方网站<a href="https://copilot.github.com/">https://copilot.github.com/</a>，点击“Sign up“按钮即可申请开通。当获得开通权限后，就可以在 Github 上使用 Copilot。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649145740/WX20220405-160150_hkvi4q.png" alt="官网截图"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>使用 Copilot 时，需要安装一个插件，在 VSCode 的插件菜单中搜索 <code>Copilot</code>，即可找到插件，名字为 <code>Github Copilot</code>，对应的插件市场的地址为<a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">https://marketplace.visualstudio.com/items?itemName=GitHub.copilot</a>，安装即可。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649146016/2051649145951_.pic_q03uk2.png" alt="安装截图"></p><p>安装后插件会提示要求登录 Github ，按提示登录即可。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649146070/03.login_qn7mvg.png" alt="登录截图"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>正常使用时，当 Copilot 给出建议时，会在光标位置的后方出现建议的代码，并灰色字显示。如果不希望使用提示，则继续输入代码即可，如果希望使用提示的代码，按下 Tab 键即可。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649146200/04.completion_ctsnl0.png" alt="使用截图"></p><p>在 VSCode 中，Copilot 有一个图标，需要确认状态是打开的。当它的样子与其它图标类似，没有背景颜色时，表示是开启的，此时当你编辑代码文件的时候，Copilot会自动提示代码建议。当它有背景颜色（红色、深黄色等）时，表示是关闭的。如果要切换状态只要点击它，然后选择全局（Globally）即可。</p><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649146129/05.icon_zyh6um.png" alt="状态图标"></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Copilot 也提供了一些快捷键，可以很方便地使用。</p><ul><li>接受建议：<code>Tab</code></li><li>拒绝建议：<code>Esc</code></li><li>打开Copilot：<code>Ctrl + Enter</code> （会打开一个单独的面板，展示10个建议）</li><li>下一条建议：<code>Alt/Option + ]</code></li><li>上一条建议：<code>Alt/Option + [</code></li><li>触发行内Copilot：<code>Alt/Option + \</code> （Coplit还没有给出建议或者建议被拒绝了，希望手工触发它提供建议）</li></ul><p><img src="https://res.cloudinary.com/dt3vcmqdt/image/upload/v1649146130/06.shortcut_afyn4j.jpg" alt="状态图标"></p><h2 id="JetBrains-IDE"><a href="#JetBrains-IDE" class="headerlink" title="JetBrains IDE"></a>JetBrains IDE</h2><h4 id="macOS-的键盘快捷键"><a href="#macOS-的键盘快捷键" class="headerlink" title="macOS 的键盘快捷键"></a>macOS 的键盘快捷键</h4><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td></tr><tr><td>拒绝内联建议</td><td>Esc</td></tr><tr><td>显示下一个内联建议</td><td>Option (⌥) or Alt+]</td></tr><tr><td>显示上一个内联建议</td><td>Option (⌥) or Alt+[</td></tr><tr><td>触发内联建议</td><td>Option (⌥)+\</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Option (⌥) or Alt+Return</td></tr></tbody></table></div><h4 id="适用于-Windows-的键盘快捷键"><a href="#适用于-Windows-的键盘快捷键" class="headerlink" title="适用于 Windows 的键盘快捷键"></a>适用于 Windows 的键盘快捷键</h4><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td></tr><tr><td>拒绝内联建议</td><td>Esc</td></tr><tr><td>显示下一个内联建议</td><td>Alt+]</td></tr><tr><td>显示上一个内联建议</td><td>Alt+[</td></tr><tr><td>触发内联建议</td><td>Alt+\</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Alt+Enter</td></tr></tbody></table></div><h4 id="Linux-的键盘快捷键"><a href="#Linux-的键盘快捷键" class="headerlink" title="Linux 的键盘快捷键"></a>Linux 的键盘快捷键</h4><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td></tr><tr><td>拒绝内联建议</td><td>Esc</td></tr><tr><td>显示下一个内联建议</td><td>Alt+]</td></tr><tr><td>显示上一个内联建议</td><td>Alt+[</td></tr><tr><td>触发内联建议</td><td>Alt+\</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Alt+Enter</td></tr></tbody></table></div><h2 id="Visual-Studio-Code-IDE"><a href="#Visual-Studio-Code-IDE" class="headerlink" title="Visual Studio Code IDE"></a>Visual Studio Code IDE</h2><h3 id="macOS-的键盘快捷键-1"><a href="#macOS-的键盘快捷键-1" class="headerlink" title="macOS 的键盘快捷键"></a>macOS 的键盘快捷键</h3><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th><th>命令名称</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td><td>编辑器.action.inlineSuggest.commit</td></tr><tr><td>拒绝内联建议</td><td>Esc</td><td>editor.action.inlineSuggest.hide</td></tr><tr><td>显示下一个内联建议</td><td>Option (⌥)+]</td><td>editor.action.inlineSuggest.showNext</td></tr><tr><td>显示上一个内联建议</td><td>Option (⌥)+[</td><td>editor.action.inlineSuggest.showPrevious</td></tr><tr><td>触发内联建议</td><td>Option (⌥)+\</td><td>编辑器.action.inlineSuggest.trigger</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Ctrl+Return</td><td>github.copilot.generate</td></tr><tr><td>打开/关闭 GitHub Copilot</td><td>没有默认快捷方式</td><td>github.copilot.toggleCopilot</td></tr></tbody></table></div><h3 id="适用于-Windows-的键盘快捷键-1"><a href="#适用于-Windows-的键盘快捷键-1" class="headerlink" title="适用于 Windows 的键盘快捷键"></a>适用于 Windows 的键盘快捷键</h3><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th><th>命令名称</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td><td>编辑器.action.inlineSuggest.commit</td></tr><tr><td>拒绝内联建议</td><td>Esc</td><td>editor.action.inlineSuggest.hide</td></tr><tr><td>显示下一个内联建议</td><td>Alt+]</td><td>editor.action.inlineSuggest.showNext</td></tr><tr><td>显示上一个内联建议</td><td>Alt+[</td><td>editor.action.inlineSuggest.showPrevious</td></tr><tr><td>触发内联建议</td><td>Alt+\</td><td>编辑器.action.inlineSuggest.trigger</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Ctrl+Enter</td><td>github.copilot.generate</td></tr><tr><td>打开/关闭 GitHub Copilot</td><td>没有默认快捷方式</td><td>github.copilot.toggleCopilot</td></tr></tbody></table></div><h3 id="Linux-的键盘快捷键-1"><a href="#Linux-的键盘快捷键-1" class="headerlink" title="Linux 的键盘快捷键"></a>Linux 的键盘快捷键</h3><div class="table-container"><table><thead><tr><th>行动</th><th>捷径</th><th>命令名称</th></tr></thead><tbody><tr><td>接受内联建议</td><td>Tab</td><td>编辑器.action.inlineSuggest.commit</td></tr><tr><td>拒绝内联建议</td><td>Esc</td><td>editor.action.inlineSuggest.hide</td></tr><tr><td>显示下一个内联建议</td><td>Alt+]</td><td>editor.action.inlineSuggest.showNext</td></tr><tr><td>显示上一个内联建议</td><td>Alt+[</td><td>editor.action.inlineSuggest.showPrevious</td></tr><tr><td>触发内联建议</td><td>Alt+\</td><td>编辑器.action.inlineSuggest.trigger</td></tr><tr><td>打开 GitHub Copilot（其他建议在单独的窗格中）</td><td>Ctrl+Enter</td><td>github.copilot.generate</td></tr><tr><td>打开/关闭 GitHub Copilot</td><td>没有默认快捷方式</td><td>github.copilot.toggleCopilot</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> Vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS - 端口443被墙? 端口转发来救活!</title>
      <link href="2021/01/15/vps/443/"/>
      <url>2021/01/15/vps/443/</url>
      
        <content type="html"><![CDATA[<p>iptables -t nat -A PREROUTING -p tcp —dport 44443 -j REDIRECT —to-ports 443<br>然后在客户端把端口改为44443，测试成功。暂时先这么用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Aliang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue - VueX 学习手记</title>
      <link href="2021/01/15/Vue/VueX/"/>
      <url>2021/01/15/Vue/VueX/</url>
      
        <content type="html"><![CDATA[<h3 id="一、序言"><a href="#一、序言" class="headerlink" title="一、序言"></a>一、序言</h3><p>本篇文章更像是我学习vuex的一个笔记，学习的资源主要是来自官方文档教程，官方教程已经讲的比较细致了，部分地方也有自己不理解的地方，所以也查过其他资料来辅助自己理解，本手记在官方的教程上加了一些自己的补充内容，希望能给你带来一些参考价值，另外也感谢互联网上其他分享知识的大佬，让我少走了些弯路！如果文章有理解不到位的地方，还请各位多批评指正！</p><hr><h3 id="二、Vuex之初体验"><a href="#二、Vuex之初体验" class="headerlink" title="二、Vuex之初体验"></a>二、Vuex之初体验</h3><hr><h5 id="为何使用Vuex"><a href="#为何使用Vuex" class="headerlink" title="为何使用Vuex"></a>为何使用Vuex</h5><p>使用Vue开发的过程中，我们经常会遇到一个状态可能会在多个组件之间使用，比如我们在做项目时使用到的用户的信息，什么昵称、头像这些，这些信息会在不同的组件用到，一旦改变这些状态，我们希望其他组件也跟随变化，比如用户充值了100元，或者改变了昵称，所以这个时候就需要状态管理模式来集中管理，关于Vuex的详细介绍可以移步到官网。</p><h5 id="学习之前的准备"><a href="#学习之前的准备" class="headerlink" title="学习之前的准备"></a>学习之前的准备</h5><p>本次我的学习都是在官方提供的脚手架搭建的项目下学习的，关于脚手架的使用本次就不再赘述，可以移步到Vue CLI，在使用Vue CLI生成的项目时会让你选择store，选择了后会在页面给你生成一个store.js，这就是最初的store，里面结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="三、State"><a href="#三、State" class="headerlink" title="三、State"></a>三、State</h3><p>Vuex的核心就是仓库store，这个store实例会被注入到所有子组件里面，里面的state属性保存着我们的状态，比如我们定义一个状态count：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>这样我们就有一个集中管理的状态count，那其他组件如何取到这个count呢，可以计算属性来获得：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。通过计算属性，我们就可以在模板里面使用模板语法来调用count了，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br>mapState有时候需要获取多个状态，但是使用计算属性会调用多次，显得麻烦，这里借助mapState方法来获取state。<br>使用mapState需要引入该方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure><br>注意：这里使用了mapState方法后，computed的写法有点区别，比如默认情况你的computed属性是这样写的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello &#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.msg + <span class="string">&#x27;world!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么你使用了mapState后需要这样写computed，把msg()放入mapState，不然会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;hello &#x27;</span>,</span><br><span class="line">    <span class="attr">localCount</span>: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">computed</span>: mapState(&#123;</span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;  <span class="comment">// 最初的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.msg + <span class="string">&#x27;world!&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用mapState从store中引入state</span></span><br><span class="line">  <span class="function"><span class="title">count</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">name</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.firstName + <span class="string">&#x27; &#x27;</span> + state.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mixCount</span>(<span class="params">state</span>)</span> &#123; <span class="comment">// 结合store和组件状态进行计算</span></span><br><span class="line">    <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>如果你使用了展开运算符…，那么computed属性不需要改造，按正常写法写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123; <span class="comment">// 使用展开的话可以按这种方式写，否则要使用另外一种方式，不然要报错</span></span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.msg;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 这里返回一个状态count，</span></span><br><span class="line">  <span class="comment">// 返回多个你可以这样写...mapState([&#x27;count&#x27;, &#x27;firstName&#x27;, &#x27;lastName&#x27;])</span></span><br><span class="line">  ...mapState([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="四、Getter"><a href="#四、Getter" class="headerlink" title="四、Getter"></a>四、Getter</h3><p>getter就是对状态进行处理的提取出来的公共部分，当状态要进行筛选这些操作时，我们可以通过getter处理过后再返回给组件使用，比如我们在state部分定义了一个list数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>我们想要筛选出数组里面的偶数然后再在组件里面使用，那么筛选的这个工作可以放在getter里面来完成。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; <span class="comment">//  这个主要是对状态的处理，相当于把状态处理的方法抽成公共部分来管理了</span></span><br><span class="line">    <span class="function"><span class="title">modifyArr</span>(<span class="params">state</span>)</span> &#123; <span class="comment">// 一般化getter</span></span><br><span class="line">      <span class="keyword">return</span> state.list.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params">state, getter</span>)</span> &#123; <span class="comment">// 方法里面传getter，调用modifyArr来计算长度</span></span><br><span class="line">      <span class="keyword">return</span> getter.modifyArr.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>之后再在其他组件的computed里面去调用getter来获取想要的状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">list</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.modifyArr;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>mapGetters<br>mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性，当我们想在组件里面引入多个getter时，可以使用mapGetter：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br></pre></td></tr></table></figure><br>比如像刚才在在上面定义的modifyArr，getLength。我们想引入这个两个并获取其值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetter([<span class="string">&#x27;modifyArr&#x27;</span>, <span class="string">&#x27;getLength&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你当然可以为其指定别名，不一定非得用store里面getters定义的名字：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  mapGetter(&#123;</span><br><span class="line">    <span class="attr">arr</span>: <span class="string">&#x27;modifyArr&#x27;</span>,   <span class="comment">// 把 `this.arr` 映射为 `this.$store.getters.modifyArr`,下面同理</span></span><br><span class="line">    <span class="attr">length</span>: <span class="string">&#x27;getLength&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你的computed属性包含其他计算方法，那你就只能使用展开运算符的写法，这里跟mapState有点区别，其他计算属性如果写在mapGetter里面会报错，说不存在的getter，所以用以下的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.num * <span class="number">10</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...mapGetters([</span><br><span class="line">    <span class="string">&#x27;modifyArr&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;getLength&#x27;</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>或者指定别名<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123; </span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.num * <span class="number">10</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...mapGetters(&#123;</span><br><span class="line">    <span class="attr">getList</span>: <span class="string">&#x27;modifyArr&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="string">&#x27;getLength&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后再模板里面调用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>mapGetters的使用演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的数字：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的数组长度为：&#123;&#123; length &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in getList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="五、Mutation"><a href="#五、Mutation" class="headerlink" title="五、Mutation"></a>五、Mutation</h3><p>当我们需要修改store里面的状态时，我们不是在组件里面直接去修改它们，而是通过mutation里面的方法来进行修改，这样有利于追踪状态的改变。<br>比如state里面有一个count变量，我们点击加减按钮来控制它的值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.count++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">reduce</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.count--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>在其他组件里面，我们通过定义methods并绑定时间来触发改变，这里需要使用commit：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;add&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">reduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;reduce&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>提交载荷<br>这个就是在commit时提交额外的参数，比如我传了额外的值加到count上面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  <span class="function"><span class="title">loadAdd</span>(<span class="params">state, payload</span>)</span> &#123;  <span class="comment">// 提交载荷，额外参数</span></span><br><span class="line">    state.count += payload;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>然后再组件里面使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">loadAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;loadAdd&#x27;</span>, <span class="number">100</span>); <span class="comment">// 传递额外参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>再这里官方文档建议载荷（也就是那个额外参数）最好使用对象来传，这样可以包含多个字段并且记录的 mutation 会更易读，像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;loadAdd&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">extraCount</span>: <span class="number">100</span></span><br><span class="line">&#125;); <span class="comment">// 传递额外参数</span></span><br></pre></td></tr></table></figure><br>调用commit时我们也可以把所有参数写在一个对象里面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit( &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;addLoad&#x27;</span></span><br><span class="line">  <span class="attr">extraCount</span>: <span class="number">100</span></span><br><span class="line">&#125;); <span class="comment">// 传递额外参数</span></span><br></pre></td></tr></table></figure><br>Mutation 需遵守 Vue 的响应规则<br>这个主要是说你再开发过程中需要向state里面添加额外数据时，需要遵循响应准则。<br>这里我直接照搬官方文档的说明：<br>Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><p>最好提前在你的 store 中初始化好所有所需属性。</p><p>当需要在对象上添加新属性时，你应该使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象。例如，利用 stage-3 的对象展开运算符</p><p>我们可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, <span class="attr">newProp</span>: <span class="number">123</span> &#125;</span><br></pre></td></tr></table></figure><br>还是举个栗子：<br>我在mutation里面声明了一个方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addNewState</span>(<span class="params">state, payload</span>)</span> &#123; <span class="comment">// 我打算再这儿添加新的属性到state</span></span><br><span class="line">  <span class="comment">// Vue.set(state, &#x27;newProp&#x27;, &#x27;添加一个新值！&#x27;); // 这是一种写法</span></span><br><span class="line">  <span class="comment">// 这种写法用新对象替换老对象</span></span><br><span class="line">  <span class="comment">// state= &#123;...state, newProp: &#x27;添加一个新值！&#x27;&#125; // 这个玩意儿不管用了，用下面的replaceState()方法</span></span><br><span class="line">  <span class="built_in">this</span>.replaceState(&#123;...state, <span class="attr">newProp</span>: <span class="string">&#x27;添加一个新值！&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后再组件里面去调用，定义一个method：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addNewProp</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;addNewState&#x27;</span>, &#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样再执行了这个方法后，会及时更新到state，再组件的computed属性里面定义：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">newMsg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.newProp || <span class="string">&#x27;还没添加新值&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在模板里面即时展示，并且不会影响其他状态：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>添加的新值：&#123;&#123; newMsg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNewProp&quot;</span>&gt;</span>添加新值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>Mutation 必须是同步函数<br>下面这种写法必须避免（直接官方例子加持）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  someMutation (state) &#123;</span><br><span class="line">    api.callAsyncMethod(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>mapMutations<br>这个跟前面的那几个函数一个道理，都是为了简化调用，使用方法如下：<br>import {mapMutations} from ‘vuex’;<br>然后在组件的methods里面使用，这里使用官方代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="六、Action"><a href="#六、Action" class="headerlink" title="六、Action"></a>六、Action</h3><p>Action 类似于 mutation，不同在于：</p><p>Action 提交的是 mutation，而不是直接变更状态。<br>Action 可以包含任意异步操作。<br>前面说过mutation只能包含同步事务，所以在处理异步事务就需要Action，通过Action控制了异步这一过程，之后再去调用mutation里面的方法来改变状态。<br>这里我直接贴代码来一目了然，首先我定义了一个状态product：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  <span class="attr">product</span>: <span class="string">&#x27;car&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">然后再mutation中定义一个方法：</span><br><span class="line"><span class="function"><span class="title">changeProduct</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">  state.product = payload.change;</span><br><span class="line">&#125;</span><br><span class="line">在action中定义：</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="function"><span class="title">changeProduct</span>(<span class="params">context, payload</span>)</span> &#123; <span class="comment">// 这个context是一个与 store 实例具有相同方法和属性的对象</span></span><br><span class="line">    <span class="comment">// 调用mutation里的changeProduct方法</span></span><br><span class="line">    <span class="comment">// context.commit(&#x27;changeProduct&#x27;, &#123;change: &#x27;ship&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">// 改成异步方式</span></span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   context.commit(&#x27;changeProduct&#x27;, &#123;change: &#x27;ship&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">// &#125;, 1500)</span></span><br><span class="line">    <span class="comment">// 使用载荷</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="string">&#x27;ship+&#x27;</span> + payload.extraInfo; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;changeProduct&#x27;</span>, &#123;<span class="attr">change</span>: temp&#125;);</span><br><span class="line">    &#125;, <span class="number">1500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在组件methods中定义事件触发分发：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">selectProduct</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.$store.dispatch(&#x27;changeProduct&#x27;)</span></span><br><span class="line">    <span class="comment">// 载荷方式分发</span></span><br><span class="line">    <span class="comment">// this.$store.dispatch(&#x27;changeProduct&#x27;, &#123;</span></span><br><span class="line">    <span class="comment">//   extraInfo: &#x27;sportcar&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// 或者这种</span></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;changeProduct&#x27;</span>,</span><br><span class="line">      <span class="attr">extraInfo</span>: <span class="string">&#x27;-&gt;sportcar&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>这样一个简易的action就完成了！<br>mapActions<br>这里就不再赘述了，看名字就知道跟前面几个叫map开头的辅助函数类似，用来映射action里面的方法，这里也直接贴官方代码了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>有时候我们想知道action里面异步执行后的状态然后再去修改其他信息，这个可以借助Promise来实现。这里在state里面声明一个状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  <span class="attr">userInfo</span>: &#123; <span class="comment">// 这个变量用来测试组合变量</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>接着声明mutation:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    <span class="comment">// 以下用来测试组合action</span></span><br><span class="line">    <span class="function"><span class="title">changeInfo</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">      state.userInfo.name = <span class="string">&#x27;lee haha&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>声明action：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="function"><span class="title">changeInfo</span>(<span class="params">context, payload</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;changeInfo&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时我们在组件里面定义方法去派发这个action：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;信息还没修改！&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="function"><span class="title">modifyInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;changeInfo&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.status = <span class="string">&#x27;信息修改成功&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>模板展示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组合action<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; status &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; info.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modifyInfo&quot;</span>&gt;</span>修改信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当我们点击修改信息后，就会派发action，当修改成功的时候会同步修改上面说的展示信息。<br>当然其他定义的action方法也可以互相使用，这里直接贴官方代码了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(<span class="string">&#x27;actionA&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;someOtherMutation&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="七、Module"><a href="#七、Module" class="headerlink" title="七、Module"></a>七、Module</h3><p>模块这部分正如其名，当所有状态集中在一个对象中时，会变的相当臃肿，这个时候就需要模块的管理办法。这里我还是用代码来说明，比如我在store里面定义了两个模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义的模块A</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义模块B</span></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;wang&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后再Vuex里面声明模块：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">ma</span>: moduleA,</span><br><span class="line">    <span class="attr">mb</span>: moduleB</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    ........... <span class="comment">// 其他状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>这样一来，如果我们想要在组件里面访问其他模块的状态，可以这样，比如这里我想调用B模块里的状态：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$store.mb; <span class="comment">// 这里返回的是：&#123;name: &#x27;wang&#x27;, age: 22&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>关于模块内部的局部状态，这里跟普通的store用法没有多大的区别，主要区别以下外部传进来的状态，比如对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState，这里截取官方代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么对于getters、mutations、actions里面的方法我们像基本的store那样调用就可以了，不存在作用域限制，还是贴代码栗子吧，下面是我在store.js里面定义的模块B：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;wang&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;nope&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">modifyDesc</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">      state.desc = payload.newMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在组件里面，我定义了以下内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>7、module使用示例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：&#123;&#123; desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>修改描述<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="built_in">this</span>.$store.state.mb.name,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// desc: this.$store.state.mb.desc 注意这个如果涉及到要在store里面会被改变的状态，一定要写在</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// computed属性里面，不然不能及时反馈到视图上</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">desc</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.mb.desc;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;modifyDesc&#x27;</span>, &#123;<span class="attr">newMsg</span>: <span class="string">&#x27;lao wang is beautiful!&#x27;</span>&#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样，就可以调用mutation里面的方法了，getters和actions同理</p><p>命名空间模块<br>默认情况下，mutations、actions、getters这些都是注册在全局上面的，你可以直接调用，如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。<br>首先我新建一个js文件用来声明模块C：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* 这个文件用来声明模块C</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> moduleC = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;moduleC&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;这是模块C，用来测试命名空间的！&#x27;</span>,</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">filterList</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.list.filter(<span class="function">(<span class="params">item, index, arrSelf</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">modifyName</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">      state.name = payload.newName;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后在store.js里面引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; moduleC &#125; <span class="keyword">from</span> <span class="string">&#x27;./module_c.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">mc</span>: moduleC</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>要想这个模块成为带有命名空间的模块，在上面声明属性namespaced: true就可以了，那么里面的mutations、getters和actions里面的方法的调用就要多走一层路径，比如我在组件里面去调用mutations里面的方法（getters和actions同理）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">modify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.$store.commit(&#x27;mc/modifyName&#x27;, &#123;</span></span><br><span class="line">    <span class="comment">//   newName: &#x27;命名空间模块C&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;mc/modifyName&#x27;</span>,</span><br><span class="line">      <span class="attr">newName</span>: <span class="string">&#x27;命名空间模块C&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当然模块里面再嵌套模块也可以，路径要不要多走一层主要看你的namespaced: true有没有声明，这里贴一下官方的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">account</span>: &#123;</span><br><span class="line">      <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      <span class="attr">state</span>: &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      <span class="attr">getters</span>: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">actions</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        <span class="attr">myPage</span>: &#123;</span><br><span class="line">          <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        <span class="attr">posts</span>: &#123;</span><br><span class="line">          <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">          <span class="attr">getters</span>: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>在带命名空间的模块内访问全局内容<br>如果想要在模块内部的getters、mutations和actions里面访问到全局的内容，这儿Vuex已经封装好了，你只需要多传几个参数即可。官方演示来一波，简单明了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块的 getter 中，`getters` 被局部化了</span></span><br><span class="line">      <span class="comment">// 你可以使用 getter 的第四个参数来调用 `rootGetters`</span></span><br><span class="line">      someGetter (state, getters, rootState, rootGetters) &#123;</span><br><span class="line">        getters.someOtherGetter <span class="comment">// -&gt; &#x27;foo/someOtherGetter&#x27;</span></span><br><span class="line">        rootGetters.someOtherGetter <span class="comment">// -&gt; &#x27;someOtherGetter&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">someOtherGetter</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="comment">// 在这个模块中， dispatch 和 commit 也被局部化了</span></span><br><span class="line">      <span class="comment">// 他们可以接受 `root` 属性以访问根 dispatch 或 commit</span></span><br><span class="line">      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;</span><br><span class="line">        getters.someGetter <span class="comment">// -&gt; &#x27;foo/someGetter&#x27;</span></span><br><span class="line">        rootGetters.someGetter <span class="comment">// -&gt; &#x27;someGetter&#x27;</span></span><br><span class="line"></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someOtherAction&#x27;</span></span><br><span class="line">        dispatch(<span class="string">&#x27;someOtherAction&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someOtherAction&#x27;</span></span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>) <span class="comment">// -&gt; &#x27;foo/someMutation&#x27;</span></span><br><span class="line">        commit(<span class="string">&#x27;someMutation&#x27;</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; &#x27;someMutation&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      someOtherAction (ctx, payload) &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在模块里面使用辅助函数mapState、mapGetters、mapMutations和mapActions<br>由于存在命名空间，在组件里面采用上面的写法会出现问题，这里要想使用辅助函数来映射模块里面的东西需要指定空间名称来告诉辅助函数应该去哪儿找这些。<br>这儿我以上面我的C模块为例，首先对于mapSatate函数可以这样玩，我在全局的modules里面声明了mc，那我的空间名称就是mc：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">&#x27;mc&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>]) <span class="comment">// 这里模块里面要使用辅助函数的话要多传一个参数才行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后在模版里面写name，desc即可，或者可以这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(<span class="string">&#x27;mc&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">name</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">desc</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.desc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>对于actions、mutations和getters方式类似，主要是要指定空间名称，比如对于声明的mutations：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(<span class="string">&#x27;mc&#x27;</span>, [<span class="string">&#x27;modifyName&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你确实不想在每个辅助函数里写空间名称，Vuex也提供了其它办法，使用createNamespacedHelpers创建基于某个命名空间辅助函数，它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapMutations &#125; = createNamespacedHelpers(<span class="string">&#x27;mc&#x27;</span>);</span><br></pre></td></tr></table></figure><br>这样你在写辅助函数的时候就不需要单独指定空间名称了。<br>其它类似，恕我就不再赘述了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
